% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_summary_wind_2d.R
\name{stat_summary_wind_2d}
\alias{stat_summary_wind_2d}
\title{Summarise z values over binned wind data.}
\usage{
stat_summary_wind_2d(
  data = NULL,
  mapping = NULL,
  geom = "raster",
  position = "identity",
  ...,
  fun = "mean",
  fun.args = list(),
  nmin = 1,
  ws_max = NA,
  bins = 10^2,
  smooth = TRUE,
  k = 100,
  extrapolate = TRUE,
  dist = 0.1,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{data}{The data to be displayed in this layer. Requires input data including at least three
columns carrying information regarding:
* wind direction (in Â°)
* wind velocity
* z-values (e.g. air pollutant concentration)}

\item{mapping}{ggplot2 mapping, e.g. aes(wd = wd, ws = ws, z = NOx); requires wd, ws, z}

\item{geom}{The geometric object to use display the data (in this case: raster).}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{other arguments passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}} as \code{params = list(...)}.}

\item{fun}{function or list of functions for summary.}

\item{fun.args}{a list of extra arguments to pass to fun.}

\item{nmin}{numeric, minimum number of values for fun, if n < nmin: NA is returned}

\item{ws_max}{numeric or NA, maximum wind velocity for binning: above ws_max, z is set NA}

\item{bins}{numeric, number of bins over the range of values if \code{!groups \%in\% c("u", "v")}}

\item{smooth}{TRUE/FALSE, applies if \code{groups = c("u", "v")}; should smoothing of summary results should be performed
using \code{\link[=fit_gam_surface]{fit_gam_surface()}}?}

\item{k}{numeric, applies if smooth = TRUE; degree of smoothing in smooth term in fit_gam_surface()}

\item{extrapolate}{TRUE/FALSE, applies if smooth = TRUE; fit_gam_surface() returns extrapolated (predicted)
values for u, v coordinates that otherwise would have have NA for summarised z if extrapolate = TRUE,
those values are returned (to a certain degree depending on the value of dist)}

\item{dist}{numeric, fraction of 1, applies if smooth = TRUE and extrapolate = TRUE; maximum distance to next
coordinate-pair at which the result of fit_gam_surface(z) should be returned}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
ggplot2 layer
}
\description{
Binning is done by StatWind, so input data to\code{\link[=stat_summary_wind]{stat_summary_wind()}} should be original unbinned data.
Depending on the groups argument, binning is either done 2-dimensional over cartesian u and v wind vectors
(calculated from input data; then, \code{\link[=stat_summary_wind]{stat_summary_wind()}} yields results similar to \code{\link[openair:polarPlot]{openair::polarPlot()}})
or 1-dimensional over wind direction or wind velocity bins, respectively.
}
\section{Aesthetics}{

\itemize{
\item wd: wind direction in degrees
\item ws: wind velocity
\item z: z values to be summarised
}
}

\section{Computed variables}{

\itemize{
\item If groups = c("u", "v"): a tibble is returned, binned over u and v, with variables:
}
\itemize{
\item wd: wind direction corresponding to midpoint value of u and v
\item ws: wind velocity corresponding to midpoint value of u and v
\item wd_class: new bins over wd considering binwidth
\item ws_class: new bins over ws considering binwidth and ws_max
\item u: bins over u (from input wd and ws)
\item v: bins over v (from input wd and ws)
\item z: result from fun(z, ...)
}
\itemize{
\item If groups = NULL: groups = "wd". In this case, bins are calculated over wind direction;
a tibble including wd_class and summarised z is returned
\item groups can be strings for other varibables in data; then fun is applied over those;
a tibble including groups and summarised z is returned
}
}

\examples{
library(ggplot2)

fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_2010-2014.csv")

df <- rOstluft::read_airmo_csv(fn) \%>\%
  rOstluft::rolf_to_openair()

ggplot(df, aes(x = stat(u), y = stat(v), fill = stat(z))) +
  stat_summary_wind_2d(mapping = aes(wd = wd, ws = ws, z = NO2), bins = 50^2) +
  coord_cartpolar() +
  scale_fill_viridis_c(na.value = NA)
}
