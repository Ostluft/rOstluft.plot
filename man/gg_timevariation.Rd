% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gg_timevariation.R
\name{gg_timevariation}
\alias{gg_timevariation}
\alias{gg_timevariation_wday_hour}
\alias{gg_timevariation_wday}
\alias{gg_timevariation_month}
\alias{gg_timevariation_diurnal}
\title{Plot time variations}
\usage{
gg_timevariation(
  data,
  dt = "starttime",
  y = "value",
  group = NULL,
  id_cols = grp("site", "parameter", "interval", "unit"),
  statistic = c("mean", "median"),
  draw_ci = TRUE,
  conf_interval = NULL,
  ylab = ggplot2::waiver(),
  ylim = c(NA, NA),
  legend_title = NULL,
  language_code = "de"
)

gg_timevariation_wday_hour(
  data,
  dt = "starttime",
  y = "value",
  group = NULL,
  id_cols = grp("site", "parameter", "interval", "unit"),
  statistic = c("mean", "median"),
  draw_ci = TRUE,
  conf_interval = NULL,
  ylab = ggplot2::waiver(),
  ylim = c(NA, NA),
  legend_title = NULL,
  language_code = "de"
)

gg_timevariation_wday(
  data,
  dt = "starttime",
  y = "value",
  group = NULL,
  id_cols = grp("site", "parameter", "interval", "unit"),
  statistic = c("mean", "median"),
  draw_ci = TRUE,
  conf_interval = NULL,
  ylab = ggplot2::waiver(),
  ylim = c(NA, NA),
  legend_title = NULL,
  language_code = "de"
)

gg_timevariation_month(
  data,
  dt = "starttime",
  y = "value",
  group = NULL,
  id_cols = grp("site", "parameter", "interval", "unit"),
  statistic = c("mean", "median"),
  draw_ci = TRUE,
  conf_interval = NULL,
  ylab = ggplot2::waiver(),
  ylim = c(NA, NA),
  legend_title = NULL,
  language_code = "de"
)

gg_timevariation_diurnal(
  data,
  dt = "starttime",
  y = "value",
  group = NULL,
  id_cols = grp("site", "parameter", "interval", "unit"),
  statistic = c("mean", "median"),
  draw_ci = TRUE,
  conf_interval = NULL,
  ylab = ggplot2::waiver(),
  ylim = c(NA, NA),
  legend_title = NULL,
  language_code = "de"
)
}
\arguments{
\item{data}{data frame with input data as hourly time series}

\item{dt}{a string or symbol for the date time column (default: starttime)}

\item{y}{a string or symbol specifying the target column to be summarised (default: value)}

\item{group}{column as string to be used to split the input data in
multiple groups. Should be a member of \code{id_cols} eg. parameter or site (default NULL)}

\item{id_cols}{A set of columns that uniquely identifies each observation.
Use \code{rOstluft.plot::grp()} for quoting.
default \code{rOstluft.plot::grp(site, parameter, interval, unit)}}

\item{statistic}{Can be \verb{“mean”} (default) or \verb{“median”}. If the statistic is ‘mean’ then
the mean line and the 95\% confidence interval in the mean are plotted by default.
If the statistic is ‘median’ then the median line is plotted together with the
25/75th quantiles are plotted. Users can control the confidence intervals with
\code{draw_ci} and \code{conf_interval}}

\item{draw_ci}{if \code{TRUE} draw confidence interval or quantiles}

\item{conf_interval}{if \code{statistic = "mean"} value of confidence interval used as
\code{conf.level} in \verb{[stats::t.test()]}. If \code{statistic = "median"} the quantiles of
\code{conv_interval} and \code{1 - conv_interval} are drawn.}

\item{ylab}{provide a custom y plot label}

\item{ylim}{limits for y scale see \code{\link[ggplot2:scale_continuous]{ggplot2::scale_y_continuous()}} for more infos.}

\item{legend_title}{provide a legend title}

\item{language_code}{ISO country code for the language used as weekdays and months
labels (default: "de")}
}
\value{
a \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} object or in case of \code{gg_timevariaton()} a \link[patchwork:patchwork-package]{patchwork::patchwork}  object
}
\description{
Inspired by \code{\link[openair:timeVariation]{openair::timeVariation()}} multiple functions to plot diurnal,
day hour of the week, day of the week and monthly variation. The functions are
optimized for data in long format and the defaults are for the rolf format from
the \href{https://ostluft.github.io/rOstluft/index.html}{rOstluft Package}.
}
\examples{
library(ggplot2)

fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_2010-2014.csv")

data <-
  rOstluft::read_airmo_csv(fn) \%>\%
  rOstluft::pluck_parameter("NOx", "NO", "NO2") \%>\%
  rOstluft::resample(new_interval = "h1")

# monthly variation of data
gg_timevariation_month(data, group = "parameter", ylab = "Konzentration [µg/m3]")

# for faceting the variable must be included in the id_cols
gg_timevariation_wday(
  data,
  group = "parameter",
  id_cols = grp(site, parameter, interval, unit, season = cut_season(starttime))
) + facet_wrap(vars(season))

# utility function to compose all plots together using patchwork
# for advanced use cases you should probably compose the plot yourself
# you can use ylim to start all y axis by 0
gg_timevariation(
  data,
  group = "parameter",
  ylab = "Konzentration [µg/m3]",
  ylim = c(0, NA)
)


# you can use wide data, but only with a single pollutant
data_wide <- rOstluft::rolf_to_openair(data)

gg_timevariation_wday_hour(
  data_wide,
  dt = date,
  y = NO2,
  group = "site",
  id_cols = grp(site)
)

# you can also use a function in id_cols to create groups
gg_timevariation_diurnal(
  data_wide,
  dt = date,
  y = NO2,
  group = "season",
  id_cols = grp(site, season = cut_season(date))
)
}
