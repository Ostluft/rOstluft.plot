% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggcalendar.R
\name{ggcalendar}
\alias{ggcalendar}
\alias{cal_month_border}
\alias{cal_label}
\title{Calendar time series plot with tiles}
\usage{
ggcalendar(
  data,
  x = "date",
  z = "O3_max_h1",
  size = 0.1,
  color = "white",
  ...,
  locale = Sys.getlocale("LC_TIME")
)

cal_month_border(
  size = 0.5,
  lineend = "square",
  linejoin = "bevel",
  color = "grey5",
  ...
)

cal_label(
  mapping = NULL,
  stat = "identity",
  data = NULL,
  geom = "text",
  position = "identity",
  show.legend = FALSE,
  inherit.aes = TRUE,
  na.rm = TRUE,
  size = 2,
  color = "white",
  ...
)
}
\arguments{
\item{data}{input data}

\item{x}{date column as Date, POSIXct or Character}

\item{z}{value columns}

\item{size}{parameter passed on to \code{\link[=geom_tile]{geom_tile()}} => space between tiles}

\item{color}{parameter passed on to \code{\link[=geom_tile]{geom_tile()}} => color of space between tiles}

\item{...}{more options for \code{\link[ggplot2:geom_tile]{ggplot2::geom_tile()}}}

\item{locale}{locale string for \code{\link[lubridate:month]{lubridate::month()}} and \code{\link[lubridate:day]{lubridate::wday()}}. See \code{\link[=Sys.getlocale]{Sys.getlocale()}}}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{geom}{geom used for layer. "label" could be an alternative}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}
}
\value{
ggplot2 object

ggplot2 layer

ggplot2 layer
}
\description{
ggcalendar calculates the necessary date components and creates a ggplot object with the correct
mappings for the other cal_* components.

cal_month_border uses \code{\link[ggplot2:geom_segment]{ggplot2::geom_segment()}} to draw a border around the months.

cal_label is a wrapper around \code{\link[ggplot2:geom_text]{ggplot2::geom_text()}} (but \code{\link[ggplot2:geom_text]{ggplot2::geom_label()}} could be used).
}
\examples{
library(ggplot2)

fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_2010-2014.csv")

# keep only 2 years for smaller plotsize
df <-
 rOstluft::read_airmo_csv(fn) \%>\%
 dplyr::filter(starttime < lubridate::ymd(20120101)) \%>\%
 rOstluft::resample(new_interval = "d1") \%>\%
 rOstluft::rolf_to_openair()

ggcalendar(df, z = "PM10") +
  scale_fill_viridis_c(direction = -1, option = "magma", na.value = NA)

# can be customised...
ggcalendar(df, z = "PM10") +
  scale_fill_viridis_c(direction = -1, option = "magma", na.value = NA) +
  cal_month_border(color = "black") +
  stat_filter(aes(filter = PM10 > 50),  position = position_nudge(y = 0.25),
              size = 1, shape = 21, color = "white", fill = "white") +
  cal_label(aes(label = round(PM10,0)))

}
