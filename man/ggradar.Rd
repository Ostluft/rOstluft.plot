% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggradar.R
\name{ggradar}
\alias{ggradar}
\title{ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot}
\usage{
ggradar(data, mapping, nmin = 3, fun = "mean", fun.args = list(na.rm
  = TRUE), wd_binwidth = 45, color_scale = scale_color_viridis_d(),
  fill_scale = scale_fill_viridis_d(alpha = 0.25), bg = NULL,
  layer_args = list(geom = "polygon"), param_args = list())
}
\arguments{
\item{data}{tibble containing wind speed, wind direction and air pollutant concentration data}

\item{mapping}{ggplot2 mapping, e.g.\code{ aes(wd = wd, ws = ws, z = NOx)}; require aesthetics wd, ws, z}

\item{nmin}{numeric, minimum number of data points to be averaged in one wind direction bin}

\item{fun}{character string or vector of character strings, stat function(s) to be applied at wind direction bins}

\item{fun.args}{list, arguments to fun}

\item{wd_binwidth}{numeric, binwidth for wind direction in Â°, wd_binwidth should fullfill:
\code{(360 / wd_binwidth) \%in\% c(4, 8, 12, 16)}}

\item{color_scale}{ggplot2 discrete color scale, e.g. \code{\link[ggplot2:scale_color_gradientn]{ggplot2::scale_color_gradientn()}}}

\item{fill_scale}{ggplot2 discrete fill scale, e.g. \code{\link[ggplot2:scale_fill_gradientn]{ggplot2::scale_fill_gradientn()}}}

\item{bg}{raster map, e.g. ggmap object as plot background}

\item{layer_args}{named list, further arguments passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}} call within \code{\link[=stat_summary_wind]{stat_summary_wind()}}}

\item{param_args}{named list, further param passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}} as params within \code{\link[=stat_summary_wind]{stat_summary_wind()}}}

\item{ws_binwidth}{numeric, binwidth for wind speed}

\item{ws_max}{numeric, can be NA, wind speed is squished at this value}
}
\value{
\code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} object
}
\description{
ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot
}
\examples{
library(ggplot2)

df <-
  rOstluft::read_airmo_csv(system.file("extdata", "Zch_Stampfenbachstrasse_2010-2014.csv",package = "rOstluft.data", mustWork = TRUE)) \%>\%
  rOstluft::rolf_to_openair() \%>\%
  dplyr::mutate(wday = lubridate::wday(date, label = TRUE, week_start = 1))

ggradar(df, aes(wd = wd, ws = ws, z = NOx), param_args = list(fill = "blue", color = "blue", alpha = 0.5)) + ylab("NOx")

q95 <- function(x, ...) quantile(x, 0.95, ...)
ggradar(df, aes(wd = wd, ws = ws, z = NOx, group = stat(stat), color = stat(stat)),
        param_args = list(fill = NA), fun = list("mean", "median", "perc95" = q95)) + ylab("NOx")

df \%>\%
  dplyr::select(wd, ws, NO, NOx, wday) \%>\%
  tidyr::gather(par, val, -wd, -ws, -wday) \%>\%
  ggradar(aes(wd = wd, ws = ws, z = val, group = par, fill = par, color = par)) + ylab("mean") +
  facet_wrap(wday~.)

# with background map
bbox <- tibble::tibble(x = c(2683141 - 500, 2683141 + 500), y = c(1249040 - 500, 1249040 + 500))
bbox <- rOstluft::transform_LV95_to_WSG84(bbox)
bbox <- c(left = bbox$lon[1], right = bbox$lon[2], bottom = bbox$lat[1], top = bbox$lat[2])

raster_map <- ggmap::get_stamenmap(bbox, zoom = 16, maptype = "terrain",
                                   source = "stamen", color = "bw")

ggradar(df, aes(wd = wd, ws = ws, z = NOx), bg = raster_map,
        param_args = list(fill = "blue", color = "blue", alpha = 0.2)) +
  ylab("NOx") +
  theme(panel.grid.major = ggplot2::element_line(linetype = 1, color = "white"))
}
