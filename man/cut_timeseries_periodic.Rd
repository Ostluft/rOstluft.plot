% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cutfuns.R
\name{cut_timeseries_periodic}
\alias{cut_timeseries_periodic}
\title{Cut a tibble with a datetime column}
\usage{
cut_timeseries_periodic(
  data,
  x = "starttime",
  include_daylight = TRUE,
  coords = c(lat = 47.36667, lon = 8.55)
)
}
\arguments{
\item{data}{tibble containing a column starttime of type POSIXct with a timezone}

\item{x}{symbolic reference to date time column used for cutting}

\item{include_daylight}{boolean indicating to calculate daylight for each starttime.
Disable to improve perfomance.}

\item{coords}{a named vector of the location in  WGS84 coordinates for the daylight factoring.
\code{\link[suncalc:getSunlightTimes]{suncalc::getSunlightTimes()}} is used to calculate sunrise, sunset times.
Default: c(lat = 47.36667, lon = 8.55) => Zuerich, Switzerland}
}
\value{
a tibble with cut data; cut-factors comprise various (time-)periodic new columns:
\itemize{
\item starttime_of_day: \code{cut_time_of_day(x)}
\item date: \code{lubridate::as_date(x)} to preserve time zone don't use \code{\link[base:as.Date]{base::as.Date()}}
\item weekday: \code{lubridate::wday(x, label = TRUE, week_start = 1)} locale Abbreviations
(Mon, Tue, Wed, Thu, Fri, Sat, Sun)
\item weekend: \code{cut_weekend(x)} => Wochentag, Wochenende (use \code{\link[=cut_weekend]{cut_weekend()}} manually or
recode factor to change levels)
\item week: \code{lubridate::week(x)}
\item month: \code{lubridate::month(x, label = TRUE)} locale Abbreviations (Jan, Feb, Mar, ...)
\item season: \code{cut_season(x)} => DJF, MAM, JJA, SON (use \code{\link[=cut_season]{cut_season()}} manually or recode
factor to change levels)
\item daylight: \code{cut_daylight(x, coords)} => Tag, Nacht (use \code{\link[=cut_daylight]{cut_daylight()}} manually or
recode factor to change levels)
}
}
\description{
Appends new factor variables as columns to the dataset, for further use
with e.g. \code{\link[rOstluft.plot:summary_periodic]{rOstluft.plot::summary_periodic()}} in order to calculate summary stats for
starttime of the day, date, weekday, weekend, week, month, season, daylight.
}
\examples{
fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_h1_2013_Jan.csv")
data <- rOstluft::read_airmo_csv(fn)

data <- cut_timeseries_periodic(data)
tibble::glimpse(data)

# recoding a factor
data <- dplyr::mutate(data,
  daylight = dplyr::recode(daylight, Nacht = "night", Tag = "day"),
)
tibble::glimpse(data)

}
