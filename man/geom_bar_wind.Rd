% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_bar_wind.R, R/stat_summary_wind.R
\name{geom_bar_wind}
\alias{geom_bar_wind}
\alias{stat_summary_wind}
\title{Summarise z values over binned wind data.}
\usage{
geom_bar_wind(mapping = NULL, data = NULL, stat = "summary_wind",
  position = "stack", ..., groups = c(), fun = "mean",
  fun.args = list(), nmin = 3, wd_cutfun = cut_wd.fun(binwidth = 45),
  ws_cutfun = cut_ws.fun(binwidth = 1), na.rm = FALSE,
  show.legend = NA, inherit.aes = TRUE)

stat_summary_wind(data = NULL, mapping = NULL, geom = "bar_wind",
  position = "stack", ..., groups = c(), fun = "mean",
  fun.args = list(), nmin = 3, wd_cutfun = cut_wd.fun(binwidth = 45),
  ws_cutfun = cut_ws.fun(binwidth = 1), na.rm = FALSE,
  show.legend = NA, inherit.aes = TRUE)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}} or
\code{\link[=aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{a data.frame or tibble containing the data (wide format)}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{groups}{one or more character string for additional grouping}

\item{fun}{function or list of functions for summary.}

\item{fun.args}{a list of extra arguments passed on to fun.}

\item{nmin}{numeric, minimum number of values for fun, if n < nmin: NA is returned}

\item{wd_cutfun}{function, cut function for wind direction (to create bins). See \code{\link[=wd_cut.fun]{wd_cut.fun()}} for options.}

\item{ws_cutfun}{function, cut function for wind speed. See \code{\link[=ws_cut.fun]{ws_cut.fun()}} for examples}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[=borders]{borders()}}.}

\item{geom}{The geometric object to use display the data}
}
\value{
\code{\link[ggplot2:layer]{ggplot2::layer()}}
}
\description{
All calculation are done by \code{\link[=summary_wind]{summary_wind()}}, see the documentation for the details.
\code{\link[=stat_summary_wind]{stat_summary_wind()}} uses the aesthetics \code{ws}, \code{wd} and \code{z} to map the correspondent arguments
for \code{\link[=summary_wind]{summary_wind()}}. The computed variables are named \code{ws}, \code{wd} and \code{z}. \code{\link[=geom_bar_wind]{geom_bar_wind()}}
is an extension to \code{\link[ggplot2:geom_bar]{ggplot2::geom_bar()}} with \code{\link[=stat_summary_wind]{stat_summary_wind()}} as default stat and correct
handling of the factorized \code{x} aesthetic. To map the computed Variables use \code{\link[ggplot2:stat]{ggplot2::stat()}}.
}
\examples{
library(ggplot2)

fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_2010-2014.csv")
data <- rOstluft::read_airmo_csv(fn)
data <- rOstluft::rolf_to_openair(data)

# a simple wind rose
ggplot(data, aes(x = stat(wd), y = stat(freq), fill = stat(ws))) +
  geom_bar_wind(
    mapping = aes(wd = wd, ws = ws, z = ws),
    ws_cutfun = cut_ws.fun(ws_max = 4),
    width = 1,
    color = "white"
  ) +
  coord_polar2(start = - 22.5 / 180 * pi ) +
  scale_fill_viridis_d(direction = -1)

#

# use stat_summary_wind to generate a radar plot using
# the polygon geom, position "identity" and coord_radar()
f <- list(
  "median",
  "mean",
  "perc95" = ~ stats::quantile(., probs = 0.95)
)

ggplot(data, aes(x = stat(wd), y = stat(z), color = stat(stat), group = stat(stat))) +
  stat_summary_wind(
    mapping = aes(wd = wd, ws = ws, z = NOx),
    geom = "polygon", position = "identity",
    fun = f,
    ws_cutfun = function(x) factor("ws"),
    fill = NA,
    size = 1
  ) +
  coord_radar(start = - 22.5 / 180 * pi) +
  scale_color_viridis_d(end = 0.8)

# ggplot2 doesn't support faceting over a Variable computed in a stat.
# But we can summarise the data first and then create the plot.
# Less ggplot2 magic, but more transparent for the user
data_summarized <- summary_wind(data, ws, wd, NOx, fun = f,
  ws_cutfun = function(x) factor("ws")
)

ggplot(data_summarized, aes(x = wd, y = NOx, color = stat, group = stat)) +
  geom_polygon(size = 1, fill = NA) +
  coord_radar(start = - 22.5 / 180 * pi ) +
  scale_color_viridis_d(end = 0.8) +
  facet_wrap(vars(stat))
}
