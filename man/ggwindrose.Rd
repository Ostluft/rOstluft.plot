% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggwindrose.R
\name{ggwindrose}
\alias{ggwindrose}
\title{ggplot wrapper to create a windrose (polar wind-bin frequency plot)}
\usage{
ggwindrose(data, ws, wd, ..., wd_binwidth = 45, ws_binwidth = 1,
  ws_max = NA, groupings = groups(),
  fill_scale = scale_fill_viridis_d(), reverse = TRUE, bg = NULL)
}
\arguments{
\item{data}{tibble containing wind speed, wind direction and/or air pollutant concentration data}

\item{...}{Other arguments passed on to \code{\link[ggplot2:geom_bar]{ggplot2::geom_bar()}}. these are often aesthetics, used
to set an aesthetic to a fixed value. Defaults are \code{color = "white", width = 1, size = 0.25}}

\item{wd_binwidth}{numeric, binwidth for wind direction in Â°, wd_binwidth should fullfill:
\code{(360 / wd_binwidth) \%in\% c(4, 8, 12, 16)}}

\item{ws_binwidth}{numeric, binwidth for wind speed}

\item{ws_max}{numeric, can be NA, wind speed is squished at this value}

\item{fill_scale}{ggplot2 discrete fill scale, e.g. \code{\link[ggplot2:scale_fill_gradientn]{ggplot2::scale_fill_gradientn()}}}

\item{reverse}{TRUE/FALSE, should wind speed bin factors be sorted descending (TRUE)
or ascending (FALSE). Usually for wind roses a descending order (higher wind speed on
the outside) is used.}

\item{bg}{raster map, e.g. ggmap object as plot background}
}
\value{
ggplot object

\code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} object
}
\description{
ggplot wrapper to create a windrose (polar wind-bin frequency plot)
}
\examples{
library(ggplot2)

fn <- rOstluft.data::f("Zch_Stampfenbachstrasse_2010-2014.csv")

data <-
  rOstluft::read_airmo_csv(fn) \%>\%
  rOstluft::rolf_to_openair() \%>\%
  openair::cutData(date, type = "daylight")

ggwindrose(data, ws, wd)

# squish ws
ggwindrose(data, ws, wd, ws_max = 5)

# change binning
ggwindrose(data, ws, wd, wd_binwidth = 22.5, ws_binwidth = 1.5, ws_max = 4.5)

# don't like bar outlines?
ggwindrose(data, "ws", "wd", color = "black", ws_max = 4)

# bigger outlines
ggwindrose(data, ws, wd, ws_max = 5, size = 1)

# another fill scale
ggwindrose(data, ws, wd, ws_max = 5,
           fill_scale = scale_fill_manual(values = matlab::jet.colors(6)))

# reverse the order of ws
ggwindrose(data, ws, wd, ws_max = 5, reverse = TRUE)

# faceting: important the faceting variable, must also be in grouping!
ggwindrose(data, ws, wd, ws_max = 5, groupings = groups(daylight)) +
  facet_wrap(vars(daylight))

# you can use groupings to directly mutate the data for faceting.
# in this example we define the groupings external for better
# readability
groupings = groups(
  season = lubridate::quarter(date),  # placeholder
  year = lubridate::year(date)
)

ggwindrose(data, ws, wd, ws_max = 3, groupings = groupings) +
  facet_grid(rows = vars(year), cols = vars(season))
}
