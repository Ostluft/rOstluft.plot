[{"path":"/articles/Kalender_Linie.html","id":"kalender-aus-linien","dir":"Articles","previous_headings":"","what":"Kalender aus Linien","title":"Kalender_Linie","text":"Diese Diagramm ist optimal um verschiedene Jahre miteinander zu vergleichen und Episoden innerhalb eines Jahres zu finden","code":"library(magrittr) library(ggplot2) library(rOstluft)  fn <- system.file(\"extdata\", \"Zch_Stampfenbachstrasse_2010-2014.csv\",                   package = \"rOstluft.data\", mustWork = TRUE)  df <- read_airmo_csv(fn)  df <- resample(df, list(\"default_statistic\" = \"drop\", \"NO2\" = \"mean\"), \"d1\", data_thresh = 0.8)  df <- rolf_to_openair(df)  ggplot(df, aes(y = 1, x = date, fill = NO2)) +   geom_raster() +   scale_fill_viridis_c() +   scale_y_continuous(expand = c(0,0)) +   scale_x_datetime(expand = c(0,0), date_breaks = \"1 month\", date_labels = \"%b\") +   facet_wrap(vars(lubridate::year(date)), scales = \"free_x\", ncol = 1) +   theme_minimal() +   theme(     panel.grid = element_blank(),     axis.text.y = element_blank(),     axis.title.y = element_blank(),     axis.ticks.y = element_blank(),     axis.ticks.x = element_line(),     axis.title.x = element_blank(),     strip.text = element_text(hjust = 0)   )"},{"path":"/articles/Wind_Density.html","id":"diurnal-wind-als-density-und-boxplot","dir":"Articles","previous_headings":"","what":"Diurnal Wind als Density und Boxplot","title":"Diurnal Wind als Density und Boxplot","text":"Inspiriert bei visualising diurnal wind climatologies. Die multiplot Funktion ist kopiert von Winston Chang’s R cookbook. Die Verwendung von cowplot::plot_grid() oder einer anderen Alternative ist empfohlen. Allerdings wurde dieser Stelle darauf verzichtet um nicht eine zusätzliche Abhängigkeit zu erzeugen.","code":"library(magrittr) library(ggplot2) library(rOstluft)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\") df <- read_airmo_csv(fn) df <- rolf_to_openair(df) df <- dplyr::mutate(df, hour = lubridate::hour(.data$date))  density <- ggplot(df, aes(wd, hour)) +   stat_density_2d(aes(fill = stat(density)), geom = \"raster\", contour = FALSE,                   show.legend = FALSE, n = 200, na.rm = TRUE) +   scale_fill_viridis_c() +   scale_y_continuous(breaks = seq(0, 24, 4)) +   geom_density2d(color = \"black\", na.rm = TRUE) +   coord_cartesian(ylim = c(-0.5, 23.5),  expand = FALSE)  box <- ggplot(df, aes(x = hour, y = ws, group = hour)) +   geom_boxplot(outlier.alpha = 0.1, na.rm = TRUE) +   coord_flip(xlim = c(-0.5, 23.5), expand = FALSE) +   theme(axis.title.y=element_blank(),         axis.text.y=element_blank(),         axis.ticks.y=element_blank())  multiplot(density, box, cols = 2) #> Warning: `stat(density)` was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(density)` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. # mit 30 min Daten fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") df <- read_airmo_csv(fn) df <- rolf_to_openair(df) df <- dplyr::mutate(df,    season = rOstluft.plot::cut_season(.data$date),                     hour = lubridate::hour(.data$date) + lubridate::minute(.data$date) / 60 )  density <- ggplot(df, aes(wd, hour)) +   stat_density_2d(aes(fill = stat(density)), geom = \"raster\", contour = FALSE,                   show.legend = FALSE, n = 200, na.rm = TRUE) +   scale_fill_viridis_c() +   scale_y_continuous(breaks = seq(0, 20, 4)) +   geom_density2d(color = \"black\", na.rm = TRUE) +   coord_cartesian(ylim = c(-0.5, 24),  expand = FALSE)  box <- ggplot(df, aes(x = hour, y = ws, group = hour)) +   geom_boxplot(outlier.alpha = 0.1, na.rm = TRUE) +   coord_flip(xlim = c(-0.5, 24), expand = FALSE) +   theme(axis.title.y=element_blank(),         axis.text.y=element_blank(),         axis.ticks.y=element_blank())  multiplot(density, box, cols = 2) # facetting density <- density + facet_wrap(vars(season), ncol = 1) box <- box + facet_wrap(vars(season), ncol = 1)   multiplot(density, box, cols = 2)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas von Allmen. Author, maintainer. Jörg Sintermann. Author. Ostluft. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"von Allmen T, Sintermann J (2024). rOstluft.plot: Ploting air quality data. R package version 0.2.0, https://ostluft.github.io/rOstluft.plot/, https://github.com/Ostluft/rOstluft.plot.","code":"@Manual{,   title = {rOstluft.plot: Ploting air quality data},   author = {Thomas {von Allmen} and Jörg Sintermann},   year = {2024},   note = {R package version 0.2.0, https://ostluft.github.io/rOstluft.plot/},   url = {https://github.com/Ostluft/rOstluft.plot}, }"},{"path":"/index.html","id":"rostluftplot","dir":"","previous_headings":"","what":"Ploting air quality data","title":"Ploting air quality data","text":"Erstellen von Diagrammen für Ostluft Auswertungen und Berichte mit Bezug zu Luftschadstoffen und Meteorologie. Einige Funktionen sind aus dem package openair abgeleitet. Alle plot-Funktionen sind grundsätzlich auf das ggplot2 package bezogen.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ploting air quality data","text":"Der Quellcode von rOstluft.plot ist auf github gehosted. Die einfachste Variante ist die Installation mit Hilfe des Packages devtools:","code":"#install.packages(\"devtools\") devtools::install_github(\"Ostluft/rOstluft.plot\")"},{"path":"/index.html","id":"beispiele","dir":"","previous_headings":"","what":"Beispiele","title":"Ploting air quality data","text":"","code":"library(rOstluft.plot) library(rOstluft) library(rOstluft.data) library(ggplot2) library(dplyr) library(lubridate) library(tibble) library(purrr) library(scales) library(openair)  data <-   rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") %>%    rOstluft::read_airmo_csv() %>%   rOstluft::rolf_to_openair() %>%   openair::cutData(date, type = \"daylight\") %>%    tibble::as_tibble() %>%    dplyr::mutate(     wday = lubridate::wday(date, label = TRUE, week_start = 1),     year = lubridate::year(date)   )"},{"path":"/index.html","id":"windrose-auf-karte","dir":"","previous_headings":"","what":"Windrose auf Karte","title":"Ploting air quality data","text":"","code":"bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb)  ggwindrose(data, ws, wd, ws_max = 4, bg = bg, ) +   theme(     panel.grid.major = element_line(linetype = 2, color = \"black\", size = 0.5)    ) # Für Facetten müssen die facet Variablen in groupings enthalten sein: ggwindrose(data, ws, wd, ws_max = 4, groupings = grp(daylight)) +   facet_wrap(vars(daylight)) # y Achse kann wie gewohnt mit einer scale_y_continuous angepasst werden # das untere Limit sollte auf 0 gesetzt werden ggwindrose(data, ws, wd, ws_max = 4, groupings = grp(daylight)) +   facet_wrap(vars(daylight)) +   scale_y_continuous(     limits = c(0, NA),      expand = expand_scale(),      labels = scales::percent_format(1),     breaks = seq(0, 0.3, 0.05)   )"},{"path":"/index.html","id":"radar-chart-windstatistik","dir":"","previous_headings":"","what":"Radar-chart Windstatistik","title":"Ploting air quality data","text":"","code":"# Simpler Radarplot ggradar(data, wd, NOx, fill = \"gray30\", alpha = 0.5, show.legend = FALSE) # mehrere Statistik Funktionen q05 <- function(x, ...) quantile(x, 0.05, ...) q95 <- function(x, ...) quantile(x, 0.95, ...) stat_reorder <- function(stat) {   factor(stat, levels = rev(c(\"perc05\", \"median\", \"mean\", \"perc95\"))) }  ggradar(data, wd, NOx,     fun = list(\"perc05\" = q05, \"median\", \"mean\", \"perc95\" = q95),     fun_reorder = stat_reorder, color = NA, alpha = 0.9) +   scale_y_continuous(limits = c(0,120)) +   scale_fill_viridis_d(begin = 0.2) # Karte als Hintergrund bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb)  ggradar(data, wd, NOx, bg = bg, lwd = 1,           color = \"steelblue\", fill = \"steelblue\", alpha = 0.5) +    theme(     panel.grid.major = element_line(linetype = 1, color = \"white\"),     axis.text.x = element_text(color = \"gray10\")   )"},{"path":"/index.html","id":"polarplot-openair-style","dir":"","previous_headings":"","what":"polarplot openair-style","title":"Ploting air quality data","text":"","code":"fs <- scale_fill_gradientn_squished(   limits = c(0,50), breaks = seq(0,50,10),   na.value = NA, colors = matlab::jet.colors(20) )  ggpolarplot(data, wd = wd, ws = ws, z = NOx, ws_max = 4,     bg = bg, alpha = 0.6,     fill_scale = fs, smooth = TRUE, breaks = c(0,2,4)   ) +   theme(     panel.grid.major = element_line(linetype = 2, color = \"black\", size = 0.5)   )"},{"path":"/index.html","id":"tagesgang-jahresgang-heatmap","dir":"","previous_headings":"","what":"Tagesgang-Jahresgang heatmap","title":"Ploting air quality data","text":"","code":"ggyearday(data, time = \"date\", z = \"O3\")"},{"path":"/index.html","id":"kalender--stat_filter","dir":"","previous_headings":"","what":"Kalender + stat_filter","title":"Ploting air quality data","text":"Kalender der max Stundenwerte des Tages von Ozon","code":"statstable <- tibble::tribble(   ~parameter, ~statistic, ~from, ~to,   \"O3\", \"mean\", \"input\", \"h1\",   \"O3\", \"max\", \"h1\", \"d1\" )  data_d1 <-    rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") %>%    rOstluft::read_airmo_csv() %>%   dplyr::filter(starttime < lubridate::ymd(20130101)) %>%    rOstluft::calculate_statstable(statstable) %>%   purrr::pluck(\"d1\") %>%    rOstluft::rolf_to_openair()   ggcalendar(data_d1, z = \"O3_max_h1\") +   scale_fill_viridis_c(direction = -1, option = \"magma\", na.value = NA) +   cal_month_border(size = 1) +   stat_filter(     aes(filter = O3_max_h1 > 120), size = 1,      color = \"white\", fill = \"white\", shape = 21,     position = position_nudge(y = 0.25)   ) +   cal_label(aes(label = round(O3_max_h1,0)), fontface = \"bold\")"},{"path":"/index.html","id":"hysplit-trajektorien-openair-data-format","dir":"","previous_headings":"","what":"Hysplit Trajektorien (openair data format)","title":"Ploting air quality data","text":"","code":"fn <- system.file(\"extdata\", \"2017_ZH-Kaserne-hysplit.rds\", package = \"rOstluft.data\") traj <- readRDS(fn) traj <- dplyr::filter(traj,    dplyr::between(lubridate::as_date(date), lubridate::ymd(\"2017-03-08\"), lubridate::ymd(\"2017-03-14\")) )  # simple ggtraj(traj) # Schadstoff statt Trajektorienhöhe # Interessant für den Transport von Schadstoffen wie EC. In diesem Beispiel wird PM2.5 # verwendet weil keine EC Daten in den Beispieldaten enthalten sind. data_2017 <-   rOstluft.data::f(\"Zch_Stampfenbachstrasse_min30_2017.csv\") %>%    rOstluft::read_airmo_csv() %>%   rOstluft::rolf_to_openair()   data_traj <-    dplyr::select(data_2017, -site) %>%    dplyr::right_join(traj, by = \"date\")    ggtraj(data_traj, aes(color = PM2.5),         color_scale = ggplot2::scale_color_viridis_c(direction = -1))"},{"path":"/index.html","id":"squishing-data","dir":"","previous_headings":"","what":"Squishing data","title":"Ploting air quality data","text":"Messdaten enthalten oft Extremwerte von ausserordentlichen Episoden oder Ereignissen. Als Beispiel Feuwerwerke oder Inversionen den PM10 Daten:  einem ggplot2 Diagramm kann bei continuous scales mit Hilfe dem Argument oob eine Funktion übergeben werden, mit Werten ausserhalb des Limits geschieht. Mit Hilfe der Funktion scales::squish() werden diese Werte auf das Minima, bzw. Maxima der Limits gesetzt. rOstluft.plot sind die Hilfsfunktionen scale_fill_viridis_squished(), scale_color_viridis_squished(), scale_fill_gradientn_squished() und scale_color_gradientn_squished() enthalten:  Teilweise ist es für Klassierungen praktisch alle Werte über einem Maximum einer zusätzlichen Klasse zusammen zu fassen. Die Funktion cut_ws() beinhaltet diese Funktionalität, hat jedoch gewisse Einschränkungen (Negative Werte werden zu NA, Breite der Klasse fix): Für mehr Flexibilät kann direkt base::cut() verwendet werden und breaks mit -Inf und Inf definiert werden.","code":"ggyearday(data, time = date, z = PM10) fill_scale <- scale_fill_viridis_squished(   breaks=c(0, 20, 40, 60, 80),    limits = c(0, 80),   direction = -1,    na.value = NA,    option = \"A\" )  ggyearday(data, time = date, z = PM10, fill_scale = fill_scale) pm10_right <- cut_ws(data$PM10, binwidth = 20, ws_max = 80) table(pm10_right) #> pm10_right #>  [0,20] (20,40] (40,60] (60,80]     >80  #>   48146   27874    6162    1191     476 pm10_left <- cut_ws(data$PM10, 20, 80, right = FALSE)  # bei der Umwandlung der Ausgabe nach HTML wird \"≥80\" in \"=80\"  # umgewandelt. In Diagrammen und der R Konsole wird das Zeichen # jedoch korrekt dargestellt. See https://github.com/r-lib/evaluate/issues/59 table(pm10_left) #> pm10_left #>  [0,20) [20,40) [40,60) [60,80)     ≥80  #>   48146   27874    6162    1191     476 breaks <- c(-Inf, 0, 19, 41, 66, 80, Inf) pm10_cut <- cut(data$PM10, breaks = breaks, right = TRUE, include.lowest = TRUE) table(pm10_cut) #> pm10_cut #>  [-Inf,0]    (0,19]   (19,41]   (41,66]   (66,80]  #>      1141     45516     31079      6164       614  #> (80, Inf]  #>       476"},{"path":"/index.html","id":"padding-data","dir":"","previous_headings":"","what":"padding data","title":"Ploting air quality data","text":"Messdaten liegen nicht immer vollständigen Zeitreihen vor. Für einige Diagramme ist es jedoch erforderlich, dass für alle Zeitpunkte ein Wert oder ein NA vorhanden ist. Für Daten im rolf Format können die rOstluft Funktionen rOstluft::pad() und rOstluft::pad_year() verwenden werden. rOstluft.plot enthält 2 generische padding Funktionen: Karten Attribution: Map tiles Stamen Design, CC 3.0. Data OpenStreetMap, ODbL.","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\") january <- rOstluft::read_airmo_csv(fn) january_oa <- rOstluft::rolf_to_openair(january                                         ) tail(january_oa) #> # A tibble: 6 × 16 #>   date                site      CO    Hr    NO   NO2 #>   <dttm>              <fct>  <dbl> <dbl> <dbl> <dbl> #> 1 2013-01-31 21:00:00 Zch_S… 0.191  67.3 0.675  7.70 #> 2 2013-01-31 21:30:00 Zch_S… 0.195  64.9 0.359  7.72 #> 3 2013-01-31 22:00:00 Zch_S… 0.191  65.1 0.424  6.84 #> 4 2013-01-31 22:30:00 Zch_S… 0.184  67.3 0.353  5.38 #> 5 2013-01-31 23:00:00 Zch_S… 0.186  67.3 0.634  5.87 #> 6 2013-01-31 23:30:00 Zch_S… 0.189  68.7 0.435  6.76 #> # ℹ 10 more variables: NOx <dbl>, O3 <dbl>, #> #   p <dbl>, PM10 <dbl>, RainDur <dbl>, SO2 <dbl>, #> #   StrGlo <dbl>, T <dbl>, wd <dbl>, ws <dbl> # site mit \"Zch_Stampfenbachstrasse\" füllen pad_to_year(january_oa, date, \"30 min\", fill = list(site = \"Zch_Stampfenbachstrasse\")) %>%    tail() #> # A tibble: 6 × 16 #>   date                site      CO    Hr    NO   NO2 #>   <dttm>              <fct>  <dbl> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 Zch_S…    NA    NA    NA    NA #> 2 2013-12-31 21:30:00 Zch_S…    NA    NA    NA    NA #> 3 2013-12-31 22:00:00 Zch_S…    NA    NA    NA    NA #> 4 2013-12-31 22:30:00 Zch_S…    NA    NA    NA    NA #> 5 2013-12-31 23:00:00 Zch_S…    NA    NA    NA    NA #> 6 2013-12-31 23:30:00 Zch_S…    NA    NA    NA    NA #> # ℹ 10 more variables: NOx <dbl>, O3 <dbl>, #> #   p <dbl>, PM10 <dbl>, RainDur <dbl>, SO2 <dbl>, #> #   StrGlo <dbl>, T <dbl>, wd <dbl>, ws <dbl> # automatisch alle factor/character columns füllen pad_to_year_fill(january_oa, date, \"30 min\") %>%    tail() #> # A tibble: 6 × 16 #>   date                site      CO    Hr    NO   NO2 #>   <dttm>              <fct>  <dbl> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 Zch_S…    NA    NA    NA    NA #> 2 2013-12-31 21:30:00 Zch_S…    NA    NA    NA    NA #> 3 2013-12-31 22:00:00 Zch_S…    NA    NA    NA    NA #> 4 2013-12-31 22:30:00 Zch_S…    NA    NA    NA    NA #> 5 2013-12-31 23:00:00 Zch_S…    NA    NA    NA    NA #> 6 2013-12-31 23:30:00 Zch_S…    NA    NA    NA    NA #> # ℹ 10 more variables: NOx <dbl>, O3 <dbl>, #> #   p <dbl>, PM10 <dbl>, RainDur <dbl>, SO2 <dbl>, #> #   StrGlo <dbl>, T <dbl>, wd <dbl>, ws <dbl> pad_to_year_fill(january, starttime, \"30 min\") %>%    tail() #> # A tibble: 6 × 6 #>   starttime           site  parameter interval unit  #>   <dttm>              <fct> <fct>     <fct>    <fct> #> 1 2013-12-31 21:00:00 Zch_… WVv       min30    m/s   #> 2 2013-12-31 21:30:00 Zch_… WVv       min30    m/s   #> 3 2013-12-31 22:00:00 Zch_… WVv       min30    m/s   #> 4 2013-12-31 22:30:00 Zch_… WVv       min30    m/s   #> 5 2013-12-31 23:00:00 Zch_… WVv       min30    m/s   #> 6 2013-12-31 23:30:00 Zch_… WVv       min30    m/s   #> # ℹ 1 more variable: value <dbl> # enthalten die Daten jedoch eine Klassifizierungs Spalte # muss man die zu füllenden Spalten explixit angeben january_oa <- openair::cutData(january_oa, \"month\") %>%    dplyr::select(date, month, dplyr::everything())  # Monats Spalte wird falscherweise mit Januar gefüllt # Ausserdem würden für jeden Monat die Daten multipliziert pad_to_year_fill(january_oa, date, \"30 min\") %>%    tail() #> # A tibble: 6 × 17 #>   date                month  site     CO    Hr    NO #>   <dttm>              <ord>  <fct> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 Januar Zch_…    NA    NA    NA #> 2 2013-12-31 21:30:00 Januar Zch_…    NA    NA    NA #> 3 2013-12-31 22:00:00 Januar Zch_…    NA    NA    NA #> 4 2013-12-31 22:30:00 Januar Zch_…    NA    NA    NA #> 5 2013-12-31 23:00:00 Januar Zch_…    NA    NA    NA #> 6 2013-12-31 23:30:00 Januar Zch_…    NA    NA    NA #> # ℹ 11 more variables: NO2 <dbl>, NOx <dbl>, #> #   O3 <dbl>, p <dbl>, PM10 <dbl>, RainDur <dbl>, #> #   SO2 <dbl>, StrGlo <dbl>, T <dbl>, wd <dbl>, #> #   ws <dbl> # mit explixiter Defintion der zu füllenden Spalten klappt es pad_to_year_fill(january_oa, date, \"30 min\", site) %>%    tail() #> # A tibble: 6 × 17 #>   date                month site      CO    Hr    NO #>   <dttm>              <ord> <fct>  <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 <NA>  Zch_S…    NA    NA    NA #> 2 2013-12-31 21:30:00 <NA>  Zch_S…    NA    NA    NA #> 3 2013-12-31 22:00:00 <NA>  Zch_S…    NA    NA    NA #> 4 2013-12-31 22:30:00 <NA>  Zch_S…    NA    NA    NA #> 5 2013-12-31 23:00:00 <NA>  Zch_S…    NA    NA    NA #> 6 2013-12-31 23:30:00 <NA>  Zch_S…    NA    NA    NA #> # ℹ 11 more variables: NO2 <dbl>, NOx <dbl>, #> #   O3 <dbl>, p <dbl>, PM10 <dbl>, RainDur <dbl>, #> #   SO2 <dbl>, StrGlo <dbl>, T <dbl>, wd <dbl>, #> #   ws <dbl>"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 OSTLUFT Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/auto_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that all elements of a list of expressions are named — auto_name","title":"Ensure that all elements of a list of expressions are named — auto_name","text":"Nearly identical rlang::exprs_auto_name(), rlang::as_name() used instead rlang::as_label(). String items string returned without wrapping double quotes. naming functions formulas optimal, better manually name theme.","code":""},{"path":"/reference/auto_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that all elements of a list of expressions are named — auto_name","text":"","code":"auto_name(exprs)"},{"path":"/reference/auto_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure that all elements of a list of expressions are named — auto_name","text":"exprs list expressions.","code":""},{"path":"/reference/auto_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure that all elements of a list of expressions are named — auto_name","text":"named list expressions","code":""},{"path":"/reference/auto_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure that all elements of a list of expressions are named — auto_name","text":"","code":"funs <- list(   \"mean\",   function(x) stats::quantile(x, probs = 0.95),   ~ stats::quantile(., probs = 0.95),   q95 = function(x) stats::quantile(x, probs = 0.95) )  auto_name(funs) #> $mean #> [1] \"mean\" #>  #> $`function (x) ...` #> function(x) stats::quantile(x, probs = 0.95) #> <environment: 0x000002654f063228> #>  #> $`~stats::quantile(., probs = 0.95)` #> ~stats::quantile(., probs = 0.95) #> <environment: 0x000002654f063228> #>  #> $q95 #> function(x) stats::quantile(x, probs = 0.95) #> <environment: 0x000002654f063228> #>   # exprs_autoname adds double quotes to strings rlang::exprs_auto_name(funs) #> $`\"mean\"` #> [1] \"mean\" #>  #> $`<fn>` #> function(x) stats::quantile(x, probs = 0.95) #> <environment: 0x000002654f063228> #>  #> $`~stats::quantile(., probs = 0.95)` #> ~stats::quantile(., probs = 0.95) #> <environment: 0x000002654f063228> #>  #> $q95 #> function(x) stats::quantile(x, probs = 0.95) #> <environment: 0x000002654f063228> #>"},{"path":"/reference/bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"set up a bounding box for ggmap::get_map() — bbox","title":"set up a bounding box for ggmap::get_map() — bbox","text":"Converts google bounding box stamen boundings box","code":""},{"path":"/reference/bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set up a bounding box for ggmap::get_map() — bbox","text":"","code":"bbox(bb)"},{"path":"/reference/bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set up a bounding box for ggmap::get_map() — bbox","text":"bb boundings box specifications","code":""},{"path":"/reference/bbox_lv95.html","id":null,"dir":"Reference","previous_headings":"","what":"bbox in WSG84 from LV95 — bbox_lv95","title":"bbox in WSG84 from LV95 — bbox_lv95","text":"Function creates bbox usage get_stadia_map() get_google_map(). Exactly one set (x, y, r) (x, y, w, h) (x1, y1, x2, y2) must supplied arguments. actual position, width height resulting map can slightly differ behalf projections LV95 (EPSG:2056) WSG84 (EPSG:4326) Pseudo Mercator (EPSG:3857). negligible cases.","code":""},{"path":"/reference/bbox_lv95.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bbox in WSG84 from LV95 — bbox_lv95","text":"","code":"bbox_lv95(   x = NA,   y = NA,   r = NA,   w = NA,   h = NA,   x1 = NA,   y1 = NA,   x2 = NA,   y2 = NA )"},{"path":"/reference/bbox_lv95.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bbox in WSG84 from LV95 — bbox_lv95","text":"x LV95 x coordinate center m y LV95 y coordinate center m r radius around center m (defines quadrat) w width box m (defines rectancle) h height box m (defines rectancle) x1 left side (lower left point together y1) m y1 bottom side (lower left point together x1) m x2 right side (upper right point together x2) m y2 top side (upper right point together y2) m","code":""},{"path":"/reference/bbox_lv95.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bbox in WSG84 from LV95 — bbox_lv95","text":"bbox list left, right, bottom, top, center = (lon, lat) WSG84 coordinates, width height m","code":""},{"path":"/reference/bbox_lv95.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bbox in WSG84 from LV95 — bbox_lv95","text":"","code":"# use in this form for background maps in polar plots bbox_lv95(2683141, 1249040, 500) #> $left #> [1] 8.533037 #>  #> $right #> [1] 8.546465 #>  #> $bottom #> [1] 47.38251 #>  #> $top #> [1] 47.39138 #>  #> $center #>      lon      lat  #>  8.53975 47.38694  #>  #> $width #> [1] 1000 #>  #> $height #> [1] 1000 #>   # specific aspect ratio bbox_lv95(2683141, 1249040, w = 700, h = 0.66 * 700) #> $left #> [1] 8.535073 #>  #> $right #> [1] 8.544428 #>  #> $bottom #> [1] 47.38491 #>  #> $top #> [1] 47.38898 #>  #> $center #>      lon      lat  #>  8.53975 47.38694  #>  #> $width #> [1] 700 #>  #> $height #> [1] 462 #>   # from a bounding box in LV95 bbox_lv95(x1 = 2683000, y1 = 1249000, x2 = 2683700, y2 = 1249500) #> $left #> [1] 8.537876 #>  #> $right #> [1] 8.547239 #>  #> $bottom #> [1] 47.3866 #>  #> $top #> [1] 47.39101 #>  #> $center #>       lon       lat  #> -19.91546  32.12763  #>  #> $width #> [1] 700 #>  #> $height #> [1] 500 #>"},{"path":"/reference/coord_cartpolar.html","id":null,"dir":"Reference","previous_headings":"","what":"cartesian coordinate system with polar grid lines — coord_cartpolar","title":"cartesian coordinate system with polar grid lines — coord_cartpolar","text":"cartesian coordinate system overlayed polar grid. used together summary_wind_2d() ggpolarplot().","code":""},{"path":"/reference/coord_cartpolar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cartesian coordinate system with polar grid lines — coord_cartpolar","text":"","code":"coord_cartpolar(   limit = NA,   expand = TRUE,   clip = \"on\",   bg = NULL,   grid = c(\"background\", \"foreground\") )"},{"path":"/reference/coord_cartpolar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cartesian coordinate system with polar grid lines — coord_cartpolar","text":"limit limit coordsystem (xlim(-limit, limit), ylim(-limit, limit)) expand TRUE clip clip panel (sure used) bg raster background image grid draw lines labels polar grid foreground background","code":""},{"path":"/reference/coord_cartpolar.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"cartesian coordinate system with polar grid lines — coord_cartpolar","text":"coordinate system bends ggplot2 internals (eg. diverted x axis). works scope, testing surficial. probably things easily break. Things breaks coord: setting limits x scale","code":""},{"path":"/reference/coord_cartpolar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cartesian coordinate system with polar grid lines — coord_cartpolar","text":"","code":"library(ggplot2)  df <- tibble::tribble(   ~wd, ~ws, ~facet,   0, 5, 1,   0, 2.5, 1,   0, 9.5, 1,   0, 4, 1,   90, 4, 1,   180, 4, 1,   270, 4, 1,   30, 8, 2,   120, 8, 2,   200, 8, 2,   300, 8, 2 )  df <- dplyr::mutate(df,   u = .data$ws * sin(2 * pi * .data$wd / 360),   v = .data$ws * cos(2 * pi * .data$wd / 360) )  p <-  ggplot(df, aes(x=u, y=v)) + geom_point()  p + coord_cartpolar()    # y scale is used for uv scaling (negative breaks are ignored) p  + coord_cartpolar() +   scale_y_continuous(     limits = c(-10, 10),     breaks = c(-5, 0, 1, 2.5, 7.5, 10),     expand = c(0, 0, 0, 0)   )   # alternative argument limit of coord_cartpolar can be used p  + coord_cartpolar(limit = 5) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`).   # a continuous x scale is used to control the breaks and labels # for wd. Setting limits in this scale will cause problems p  + coord_cartpolar() +   scale_x_continuous(     breaks = c(0, 45, 90, 180, 270),     labels = c(\"Nord\", \"NE\", \"E\", \"S\", \"W\")   )    # theming: only major grid is draw p + coord_cartpolar() +   theme(     \"panel.grid.major.x\" = element_line(color = \"red\", linewidth = 2, linetyp = \"dashed\"),     \"panel.grid.major.y\" = element_line(color = \"green\", arrow = arrow()),     \"axis.text.x\" = element_text(color = \"violet\", size = 14, face = \"bold\"),     \"axis.text.y\" = element_text(color = \"blue\")   )    # background map bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors.  p + coord_cartpolar(bg = bg)   # faceting p + coord_cartpolar(bg = bg) +   facet_wrap(vars(facet))   # if plotting a raster layer, use grid = \"foreground\" to draw # the polar grid over the raster. an expand of c(0, 0.5, 0, 0.5) # can be used to compensated the added 0.5 from raster raster <- expand.grid(u = -10:10, v = -10:10) raster$z <- runif(nrow(raster)) ggplot(raster, aes(x=u, y=v, fill=z)) +   coord_cartpolar(bg = bg, grid = \"foreground\") +   geom_raster(alpha = 0.5) +   scale_y_continuous(expand = c(0, 0.5, 0, 0.5))   # -Inf, Inf, -Inf, Inf from annotation_raster get mapped # over the complete panel ggplot(raster, aes(x=u, y=v, fill=z)) +   coord_cartpolar(grid = \"foreground\") +   annotation_raster(bg, -Inf, Inf, -Inf, Inf) +   geom_raster(alpha = 0.5) +   scale_y_continuous(expand = c(0, 0.5, 0, 0.5))"},{"path":"/reference/coord_polar2.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized coord_polar — coord_polar2","title":"Customized coord_polar — coord_polar2","text":"differences ggplot2::coord_polar() coord_polar2() : Add raster (image) background. example map created get_stadia_map() ggplot2::coord_polar() always adds outer circle r = 0.45 plot. circle removed.","code":""},{"path":"/reference/coord_polar2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized coord_polar — coord_polar2","text":"","code":"coord_polar2(theta = \"x\", start = 0, direction = 1, clip = \"on\", bg = NULL)"},{"path":"/reference/coord_polar2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customized coord_polar — coord_polar2","text":"theta variable map angle (x y) start Offset starting point 12 o'clock radians. Offset applied clockwise anticlockwise depending value direction. direction 1, clockwise; -1, anticlockwise clip drawing clipped extent plot panel? setting \"\" (default) means yes, setting \"\" means . details, please see coord_cartesian(). bg raster background image","code":""},{"path":"/reference/coord_polar2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customized coord_polar — coord_polar2","text":"ggplot2 coord system","code":""},{"path":[]},{"path":"/reference/coord_polar2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customized coord_polar — coord_polar2","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair()  data_summarized <- summary_wind(data, ws, wd, ws,   ws_cutfun = cut_ws.fun(ws_max = 4, reverse = TRUE) )  wind_rose <- ggplot(data_summarized, aes(x = wd, y = freq, fill = ws)) +   geom_bar(stat = \"identity\", alpha = 0.8) +   scale_y_continuous(     limits = c(0, NA),     expand = c(0,0, 0, 0),     labels = scales::percent   ) +   scale_fill_viridis_d()  # background map bbox <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bbox) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors.  wind_rose + coord_polar2(start = - 45 * pi / 360, bg = bg)   # removed outer circle df <- tibble::tibble(x = factor(1:10), y = runif(10, 0, 100))  p <- ggplot(df, aes(x = x, y = y)) +   geom_bar( stat = \"identity\") +   scale_x_discrete() +   theme(     axis.line.x = element_line(colour = \"red\"),     axis.line.y = element_line(colour = \"orange\"),     panel.grid.major.x = element_line(colour = \"blue\"),     panel.grid.major.y = element_line(colour = \"darkgreen\"),     panel.grid.minor.y = element_line(colour = \"darkolivegreen2\")   )  # default behaviour with no breaks p + coord_polar() + scale_y_continuous()   p + coord_polar2() + scale_y_continuous()   # behavoiur with manuel breaks and limit p + coord_polar() + scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 200))   p + coord_polar2() + scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 200))"},{"path":"/reference/coord_radar.html","id":null,"dir":"Reference","previous_headings":"","what":"Polar coordinate system without munching — coord_radar","title":"Polar coordinate system without munching — coord_radar","text":"based coord_polar2(), paths connected linear. See documentation coord_polar2() Information examples","code":""},{"path":"/reference/coord_radar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polar coordinate system without munching — coord_radar","text":"","code":"coord_radar(theta = \"x\", start = 0, direction = 1, bg = NULL)"},{"path":"/reference/coord_radar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polar coordinate system without munching — coord_radar","text":"theta variable map angle (x y) start Offset starting point 12 o'clock radians. Offset applied clockwise anticlockwise depending value direction. direction 1, clockwise; -1, anticlockwise bg raster background image","code":""},{"path":"/reference/coord_radar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polar coordinate system without munching — coord_radar","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data)  funs <- list(   \"median\",   \"mean\",   \"q95\" = ~ stats::quantile(., probs = 0.95) )  data_summarized <- summary_wind(data, ws, wd, NOx, fun = funs,   ws_cutfun = cut_number.fun(1) )  # background map bbox <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bbox) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors.  radar <- ggplot(data_summarized, aes(x = wd, y = NOx, color = stat, group = stat)) +   geom_polygon(size = 1, fill = NA) +   scale_color_viridis_d(end = 0.6) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0, 0, 0)) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead.  radar + coord_radar(start = - 22.5 / 180 * pi)   # add background map radar + coord_radar(start = - 22.5 / 180 * pi, bg = bg)   # facets radar + facet_wrap(vars(stat)) +   coord_radar(start = - 22.5 / 180 * pi)"},{"path":"/reference/create_percentile_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Searches a list for strings percentileXX and returns function (x, ...) quantile(x, XX, ...) — create_percentile_functions","title":"Searches a list for strings percentileXX and returns function (x, ...) quantile(x, XX, ...) — create_percentile_functions","text":"Searches list strings percentileXX returns function (x, ...) quantile(x, XX, ...)","code":""},{"path":"/reference/create_percentile_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Searches a list for strings percentileXX and returns function (x, ...) quantile(x, XX, ...) — create_percentile_functions","text":"","code":"create_percentile_functions(fun)"},{"path":"/reference/create_percentile_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Searches a list for strings percentileXX and returns function (x, ...) quantile(x, XX, ...) — create_percentile_functions","text":"fun named list containing functions strings","code":""},{"path":"/reference/create_percentile_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Searches a list for strings percentileXX and returns function (x, ...) quantile(x, XX, ...) — create_percentile_functions","text":"named list strings matching percentileXX replaced functions","code":""},{"path":"/reference/cut_daylight.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","title":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","text":"Cut POSIXct Vector daylight (day, night)","code":""},{"path":"/reference/cut_daylight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","text":"","code":"cut_daylight(x, coords = c(lat = 47.36667, lon = 8.55))"},{"path":"/reference/cut_daylight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","text":"x POSIXct Vector timezone coords named vector location  WGS84 coordinates daylight factoring. suncalc::getSunlightTimes() used calculate sunrise, sunset times. Default: c(lat = 47.36667, lon = 8.55) => Zuerich, Switzerland","code":""},{"path":"/reference/cut_daylight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","text":"factor vector levels day, night","code":""},{"path":"/reference/cut_daylight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a POSIXct Vector into daylight (day, night) — cut_daylight","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn)  data <- dplyr::mutate(data,   daylight_zuerich = cut_daylight(.data$starttime),   daylight_sidney =  cut_daylight(.data$starttime, c(lat = -33.9, lon = 151.2)) )  tibble::glimpse(data) #> Rows: 14,116 #> Columns: 8 #> $ starttime        <dttm> 2013-01-01 00:00:00, 2013-01-01 01:00:00, 2013-01-01… #> $ site             <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch… #> $ parameter        <fct> CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, C… #> $ interval         <fct> h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h… #> $ unit             <fct> mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m… #> $ value            <dbl> 0.8051369, 0.8326345, 0.8742825, 0.7549847, 0.7667311… #> $ daylight_zuerich <ord> Nacht, Nacht, Nacht, Nacht, Nacht, Nacht, Nacht, Nach… #> $ daylight_sidney  <ord> Tag, Tag, Tag, Tag, Tag, Tag, Tag, Tag, Tag, Tag, Tag…"},{"path":"/reference/cut_interval.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","title":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","text":"Wrappers creates partial functions x sole argument ggplot2 cut functions","code":""},{"path":"/reference/cut_interval.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","text":"","code":"cut_interval.fun(n = NULL, length = NULL, ...)  cut_number.fun(n = NULL, ...)  cut_width.fun(   width,   center = NULL,   boundary = NULL,   closed = c(\"right\", \"left\"),   ... )"},{"path":"/reference/cut_interval.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","text":"n number intervals create, length length interval ... Arguments passed base::cut.default breaks either numeric vector two unique cut points     single number (greater equal 2) giving number     intervals x cut. labels labels levels resulting category.  default,     labels constructed using \"(,b]\" interval notation.      labels = FALSE, simple integer codes returned instead     factor. right logical, indicating intervals closed     right (open left) vice versa. dig.lab integer used labels given.      determines number digits used formatting break numbers. ordered_result logical: result ordered factor? width bin width. center, boundary Specify either position edge center bin. Since bins aligned, specifying position single bin (need range data) affects location bins. specified, uses \"tile layers algorithm\", sets boundary half binwidth. center integers, width = 1 center = 0. boundary = 0.5. closed One \"right\" \"left\" indicating whether right left edges bins included bin.","code":""},{"path":"/reference/cut_interval.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","text":"function","code":""},{"path":[]},{"path":"/reference/cut_interval.fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial function constructor for ggplot2 cut functions — cut_interval.fun","text":"","code":"data <- tibble::tibble(x = runif(100, 0, 10))  funs <- list(   interval = cut_interval.fun(n = 5),   number = cut_number.fun(n = 5),   width = cut_width.fun(width = 2, boundary = 0) )  res <- dplyr::mutate_all(tibble::tibble(x = runif(100, 0, 10)), funs)  res #> # A tibble: 100 × 4 #>        x interval    number      width  #>    <dbl> <fct>       <fct>       <fct>  #>  1  6.49 (5.94,7.89] (5.16,6.52] (6,8]  #>  2  9.85 (7.89,9.85] (8.13,9.85] (8,10] #>  3  5.36 (3.99,5.94] (5.16,6.52] (4,6]  #>  4  7.61 (5.94,7.89] (6.52,8.13] (6,8]  #>  5  5.64 (3.99,5.94] (5.16,6.52] (4,6]  #>  6  7.78 (5.94,7.89] (6.52,8.13] (6,8]  #>  7  6.39 (5.94,7.89] (5.16,6.52] (6,8]  #>  8  3.79 (2.04,3.99] (2.16,5.16] (2,4]  #>  9  3.60 (2.04,3.99] (2.16,5.16] (2,4]  #> 10  8.44 (7.89,9.85] (8.13,9.85] (8,10] #> # ℹ 90 more rows  table(res$interval) #>  #> [0.0866,2.04]   (2.04,3.99]   (3.99,5.94]   (5.94,7.89]   (7.89,9.85]  #>            20            11            19            29            21   table(res$number) #>  #> [0.0866,2.16]   (2.16,5.16]   (5.16,6.52]   (6.52,8.13]   (8.13,9.85]  #>            20            20            20            20            20   table(res$width) #>  #>  [0,2]  (2,4]  (4,6]  (6,8] (8,10]  #>     20     11     19     29     21"},{"path":"/reference/cut_season.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial function constructor for cut_season — cut_season.fun","title":"Partial function constructor for cut_season — cut_season.fun","text":"Partial function constructor cut_season","code":""},{"path":"/reference/cut_season.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial function constructor for cut_season — cut_season.fun","text":"","code":"cut_season.fun(labels = NULL)"},{"path":"/reference/cut_season.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial function constructor for cut_season — cut_season.fun","text":"labels list recoding. Names order \"DJF\", \"MAM\", \"JJA\", \"SON\"","code":""},{"path":"/reference/cut_season.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial function constructor for cut_season — cut_season.fun","text":"Partial function cut_season() x sole argument","code":""},{"path":[]},{"path":"/reference/cut_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut date-time vectors into seasons — cut_season","title":"Cut date-time vectors into seasons — cut_season","text":"Cut date-time vectors seasons","code":""},{"path":"/reference/cut_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut date-time vectors into seasons — cut_season","text":"","code":"cut_season(x, labels = NULL)"},{"path":"/reference/cut_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut date-time vectors into seasons — cut_season","text":"x date-time vector labels list recoding. Names order \"DJF\", \"MAM\", \"JJA\", \"SON\"","code":""},{"path":"/reference/cut_season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut date-time vectors into seasons — cut_season","text":"factor seasons","code":""},{"path":"/reference/cut_season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut date-time vectors into seasons — cut_season","text":"","code":"dates <- lubridate::ymd(010101) + months(0:11)  cut_season(dates) #>  [1] DJF DJF MAM MAM MAM JJA JJA JJA SON SON SON DJF #> Levels: DJF < MAM < JJA < SON  cut_season(dates, c(DJF = \"winter\", MAM = \"spring\", JJA = \"summer\", SON = \"autumn\")) #>  [1] winter winter spring spring spring summer summer summer autumn autumn #> [11] autumn winter #> Levels: winter < spring < summer < autumn"},{"path":"/reference/cut_seasonyear.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial function constructor for cut_season — cut_seasonyear.fun","title":"Partial function constructor for cut_season — cut_seasonyear.fun","text":"Partial function constructor cut_season","code":""},{"path":"/reference/cut_seasonyear.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial function constructor for cut_season — cut_seasonyear.fun","text":"","code":"cut_seasonyear.fun(label = c(\"yearseason\", \"year\"), labels = NULL)"},{"path":"/reference/cut_seasonyear.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial function constructor for cut_season — cut_seasonyear.fun","text":"label choice c(\"yearseason\", \"year\"). \"yearseason\" combine year output cut_season(), \"year\" return adjusted year. labels forwarded cut_season()","code":""},{"path":"/reference/cut_seasonyear.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial function constructor for cut_season — cut_seasonyear.fun","text":"Partial function cut_seasonyear() x sole argument","code":""},{"path":[]},{"path":"/reference/cut_seasonyear.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut seasons, keep years together — cut_seasonyear","title":"Cut seasons, keep years together — cut_seasonyear","text":"Cut data year-season intervals keeping seasons together. means december added following year. label = \"year\" year adjustet.","code":""},{"path":"/reference/cut_seasonyear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut seasons, keep years together — cut_seasonyear","text":"","code":"cut_seasonyear(x, label = c(\"yearseason\", \"year\"), labels = NULL)"},{"path":"/reference/cut_seasonyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut seasons, keep years together — cut_seasonyear","text":"x date-time vector label choice c(\"yearseason\", \"year\"). \"yearseason\" combine year output cut_season(), \"year\" return adjusted year. labels forwarded cut_season()","code":""},{"path":"/reference/cut_seasonyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut seasons, keep years together — cut_seasonyear","text":"factor yearseasons","code":""},{"path":"/reference/cut_seasonyear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut seasons, keep years together — cut_seasonyear","text":"","code":"dates <- lubridate::ymd(010101) + months(0:11)  cut_seasonyear(dates) #>  [1] 2001-DJF 2001-DJF 2001-MAM 2001-MAM 2001-MAM 2001-JJA 2001-JJA 2001-JJA #>  [9] 2001-SON 2001-SON 2001-SON 2002-DJF #> Levels: 2001-DJF < 2001-MAM < 2001-JJA < 2001-SON < 2002-DJF  cut_seasonyear(dates, \"year\") #>  [1] 2001 2001 2001 2001 2001 2001 2001 2001 2001 2001 2001 2002 #> Levels: 2001 < 2002  # customize season labels labels =  c(   DJF = \"winter\", JJA = \"summer\",   MAM = \"spring\", SON = \"autumn\" )  cut_seasonyear(dates, labels = labels) #>  [1] 2001-winter 2001-winter 2001-spring 2001-spring 2001-spring 2001-summer #>  [7] 2001-summer 2001-summer 2001-autumn 2001-autumn 2001-autumn 2002-winter #> 5 Levels: 2001-winter < 2001-spring < 2001-summer < ... < 2002-winter"},{"path":"/reference/cut_timeseries_periodic.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a tibble with a datetime column — cut_timeseries_periodic","title":"Cut a tibble with a datetime column — cut_timeseries_periodic","text":"Appends new factor variables columns dataset, use e.g. summary_periodic() order calculate summary stats starttime day, date, weekday, weekend, week, month, season, daylight.","code":""},{"path":"/reference/cut_timeseries_periodic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a tibble with a datetime column — cut_timeseries_periodic","text":"","code":"cut_timeseries_periodic(   data,   x = \"starttime\",   include_daylight = TRUE,   coords = c(lat = 47.36667, lon = 8.55) )"},{"path":"/reference/cut_timeseries_periodic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a tibble with a datetime column — cut_timeseries_periodic","text":"data tibble containing column starttime type POSIXct timezone x symbolic reference date time column used cutting include_daylight boolean indicating calculate daylight starttime. Disable improve perfomance. coords named vector location  WGS84 coordinates daylight factoring. suncalc::getSunlightTimes() used calculate sunrise, sunset times. Default: c(lat = 47.36667, lon = 8.55) => Zuerich, Switzerland","code":""},{"path":"/reference/cut_timeseries_periodic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a tibble with a datetime column — cut_timeseries_periodic","text":"tibble cut data; cut-factors comprise various (time-)periodic new columns: starttime_of_day: cut_time_of_day(x) date: lubridate::as_date(x) preserve time zone use base::.Date() weekday: lubridate::wday(x, label = TRUE, week_start = 1) locale Abbreviations (Mon, Tue, Wed, Thu, Fri, Sat, Sun) weekend: cut_weekend(x) => Wochentag, Wochenende (use cut_weekend() manually recode factor change levels) week: lubridate::week(x) month: lubridate::month(x, label = TRUE) locale Abbreviations (Jan, Feb, Mar, ...) season: cut_season(x) => DJF, MAM, JJA, SON (use cut_season() manually recode factor change levels) daylight: cut_daylight(x, coords) => Tag, Nacht (use cut_daylight() manually recode factor change levels)","code":""},{"path":"/reference/cut_timeseries_periodic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a tibble with a datetime column — cut_timeseries_periodic","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn)  data <- cut_timeseries_periodic(data) tibble::glimpse(data) #> Rows: 14,116 #> Columns: 14 #> $ starttime        <dttm> 2013-01-01 00:00:00, 2013-01-01 01:00:00, 2013-01-01… #> $ site             <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch… #> $ parameter        <fct> CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, C… #> $ interval         <fct> h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h… #> $ unit             <fct> mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m… #> $ value            <dbl> 0.8051369, 0.8326345, 0.8742825, 0.7549847, 0.7667311… #> $ starttime_of_day <ord> 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, 07:0… #> $ date             <date> 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01, 2013… #> $ weekday          <ord> Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\.,… #> $ weekend          <ord> Wochentag, Wochentag, Wochentag, Wochentag, Wochentag… #> $ week             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ month            <ord> Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan… #> $ season           <ord> DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF… #> $ daylight         <ord> Nacht, Nacht, Nacht, Nacht, Nacht, Nacht, Nacht, Nach…  # recoding a factor data <- dplyr::mutate(data,   daylight = dplyr::recode(daylight, Nacht = \"night\", Tag = \"day\"), ) tibble::glimpse(data) #> Rows: 14,116 #> Columns: 14 #> $ starttime        <dttm> 2013-01-01 00:00:00, 2013-01-01 01:00:00, 2013-01-01… #> $ site             <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch… #> $ parameter        <fct> CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, C… #> $ interval         <fct> h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h… #> $ unit             <fct> mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m… #> $ value            <dbl> 0.8051369, 0.8326345, 0.8742825, 0.7549847, 0.7667311… #> $ starttime_of_day <ord> 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, 07:0… #> $ date             <date> 2013-01-01, 2013-01-01, 2013-01-01, 2013-01-01, 2013… #> $ weekday          <ord> Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\., Di\\.,… #> $ weekend          <ord> Wochentag, Wochentag, Wochentag, Wochentag, Wochentag… #> $ week             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ month            <ord> Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan… #> $ season           <ord> DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF, DJF… #> $ daylight         <ord> night, night, night, night, night, night, night, nigh…"},{"path":"/reference/cut_time_of_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","title":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","text":"Cut POSIXct Vector time day (HH:MM)","code":""},{"path":"/reference/cut_time_of_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","text":"","code":"cut_time_of_day(x)"},{"path":"/reference/cut_time_of_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","text":"x datetime object.","code":""},{"path":"/reference/cut_time_of_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","text":"ordered factor time day","code":""},{"path":"/reference/cut_time_of_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a POSIXct Vector into time of day (HH:MM) — cut_time_of_day","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_h1_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn)  data <- dplyr::mutate(data,   \"Etc/GMT-1\" = cut_time_of_day(.data$starttime),   utc = cut_time_of_day(lubridate::force_tz(.data$starttime, \"UTC\")),   utc_converted = cut_time_of_day(lubridate::with_tz(.data$starttime, \"UTC\")),   berlin = cut_time_of_day(lubridate::force_tz(.data$starttime, \"Europe/Berlin\")) )  tibble::glimpse(data) #> Rows: 14,116 #> Columns: 10 #> $ starttime     <dttm> 2013-01-01 00:00:00, 2013-01-01 01:00:00, 2013-01-01 02… #> $ site          <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch_St… #> $ parameter     <fct> CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, … #> $ interval      <fct> h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, h1, … #> $ unit          <fct> mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, … #> $ value         <dbl> 0.8051369, 0.8326345, 0.8742825, 0.7549847, 0.7667311, 0… #> $ `Etc/GMT-1`   <ord> 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, 07:00, … #> $ utc           <ord> 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, 07:00, … #> $ utc_converted <ord> 23:00, 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, … #> $ berlin        <ord> 00:00, 01:00, 02:00, 03:00, 04:00, 05:00, 06:00, 07:00, …"},{"path":"/reference/cut_wd.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial function constructor to cut wind direction into factor classes — cut_wd.fun","title":"Partial function constructor to cut wind direction into factor classes — cut_wd.fun","text":"Creates partial function ggplot2::cut_width() width = binwidth. closed = \"left\", boundary = 0 fixed arguments","code":""},{"path":"/reference/cut_wd.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial function constructor to cut wind direction into factor classes — cut_wd.fun","text":"","code":"cut_wd.fun(binwidth = 45, ...)"},{"path":"/reference/cut_wd.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial function constructor to cut wind direction into factor classes — cut_wd.fun","text":"binwidth width ggplot2::cut_width() degrees wind  direction (must fullfill binwidth %% 360 / c(4, 8, 16, 32)) ... passed ggplot2::cut_width()","code":""},{"path":"/reference/cut_wd.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial function constructor to cut wind direction into factor classes — cut_wd.fun","text":"partial cut_wd() function wd sole argument","code":""},{"path":[]},{"path":"/reference/cut_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut wind direction into factor classes — cut_wd","title":"Cut wind direction into factor classes — cut_wd","text":"Wraps ggplot2::cut_width() function width = binwidth. closed = \"left\", boundary = 0 fixed arguments","code":""},{"path":"/reference/cut_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut wind direction into factor classes — cut_wd","text":"","code":"cut_wd(   wd,   binwidth = 45,   labels = c(\"N\", \"[5.6,16.9)\", \"NNO\", \"[28.1,39.4)\", \"NO\", \"[50.6,61.2)\", \"ONO\",     \"[73.1,84.4)\", \"O\", \"[95.6,106.9)\", \"OSO\", \"[118.1,129.4)\", \"SO\", \"[140.6,151.9)\",     \"SSO\", \"[163.1,174.4)\", \"S\", \"[185.6,196.9)\", \"SSW\", \"[208.1,219.4)\", \"SW\",     \"[230.6,241.9)\", \"WSW\", \"[253.1,264.)\", \"W\", \"[275.6,286.9)\", \"WNW\", \"[298.1,309.4)\",     \"NW\", \"[320.6,331.9)\", \"NNW\", \"[343.1,354.4)\"),   ... )"},{"path":"/reference/cut_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut wind direction into factor classes — cut_wd","text":"wd numeric vector wind directions ° binwidth width ggplot2::cut_width() degrees wind  direction (must fullfill binwidth %% 360 / c(4, 8, 16, 32)) labels character vector labels wind direction bins; can NULL (labels returned), !.null(labels) length(labels) == 32 must fullfilled (actual labels subsampled indices seq(1, length(labels), length(labels) / nsectors)) ... passed ggplot2::cut_width()","code":""},{"path":"/reference/cut_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut wind direction into factor classes — cut_wd","text":"","code":"library(ggplot2) wd <- seq(0, 359) ws <- runif(length(wd))  # helper function to visualise cuts plot_cut <- function(wd, ws) {   nSectors <- length(levels(wd))   data <- tibble::tibble(wd = wd, ws = ws) %>%     dplyr::group_by(wd) %>%     dplyr::summarise(ws = mean(ws))    ggplot(data, aes(x = wd, y = ws)) +     geom_bar(stat = \"identity\", width = 1, color = \"blue\", size = 1, alpha = 0.5) +     coord_polar2(start = - pi / nSectors) +     scale_x_discrete(expand = c(0, 0)) }   # defaults plot_cut(cut_wd(wd), ws)   # maximum number of cuts plot_cut(cut_wd(wd, binwidth = 11.25), ws)   # maximum number of cuts with text labels plot_cut(cut_wd(wd, binwidth = 22.5), ws)   # change label text labels <- c(\"North\", \"East\", \"South\", \"West\") plot_cut(cut_wd(wd, binwidth = 90, labels = labels), ws)"},{"path":"/reference/cut_weekend.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","title":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","text":"Cut POSIXct Vector weekday weekend","code":""},{"path":"/reference/cut_weekend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","text":"","code":"cut_weekend(x, label = c(\"Wochentag\", \"Wochenende\"))"},{"path":"/reference/cut_weekend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","text":"x datetime object. label Vector label weekday weekend order weekday, weekend","code":""},{"path":"/reference/cut_weekend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","text":"ordered factor weekday > weekend","code":""},{"path":"/reference/cut_weekend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a POSIXct Vector into weekday and weekend — cut_weekend","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_d1_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn)  data <- dplyr::mutate(data,   weekend_ger = cut_weekend(.data$starttime),   weekend_eng =  cut_weekend(.data$starttime, c(\"weekday\", \"weekend\")) )  tibble::glimpse(data) #> Rows: 2,170 #> Columns: 8 #> $ starttime   <dttm> 2013-01-01, 2013-01-02, 2013-01-03, 2013-01-04, 2013-01-0… #> $ site        <fct> Zch_Stampfenbachstrasse, Zch_Stampfenbachstrasse, Zch_Stam… #> $ parameter   <fct> CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO, CO… #> $ interval    <fct> d1, d1, d1, d1, d1, d1, d1, d1, d1, d1, d1, d1, d1, d1, d1… #> $ unit        <fct> mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg/m3, mg… #> $ value       <dbl> 0.3807054, 0.3404095, 0.4225526, 0.4332204, 0.3367749, 0.2… #> $ weekend_ger <ord> Wochentag, Wochentag, Wochentag, Wochentag, Wochenende, Wo… #> $ weekend_eng <ord> weekday, weekday, weekday, weekday, weekend, weekend, week…"},{"path":"/reference/cut_ws.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial function constructor to cut wind velocity (or others) into factor classes — cut_ws.fun","title":"Partial function constructor to cut wind velocity (or others) into factor classes — cut_ws.fun","text":"Partial function constructor cut wind velocity (others) factor classes","code":""},{"path":"/reference/cut_ws.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial function constructor to cut wind velocity (or others) into factor classes — cut_ws.fun","text":"","code":"cut_ws.fun(   binwidth = 1,   ws_max = NA,   squish = TRUE,   right = TRUE,   reverse = FALSE,   calm = NA )"},{"path":"/reference/cut_ws.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial function constructor to cut wind velocity (or others) into factor classes — cut_ws.fun","text":"binwidth width bins ws_max cut wind speed maximum squish TRUE wind velocities greater include additional level \">ws_max\" right logical, indicating intervals closed right (open left) vice versa. reverse reverse order result. sometimes useful plotting factor. calm threshold calm wind situation. windspeed limit assigned factor level \"calm\".","code":""},{"path":"/reference/cut_ws.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial function constructor to cut wind velocity (or others) into factor classes — cut_ws.fun","text":"partial cut_ws() function ws sole argument","code":""},{"path":[]},{"path":"/reference/cut_ws.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut wind velocity (or others) into factor classes — cut_ws","title":"Cut wind velocity (or others) into factor classes — cut_ws","text":"Based base::cut(). Allows specifiy maximum wind velocity. squish = TRUE values greater ws_max combined one additional factor level \">ws_max\". squish = FALSE resulting vector contain NA values. correct handling NA values factor must done user.","code":""},{"path":"/reference/cut_ws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut wind velocity (or others) into factor classes — cut_ws","text":"","code":"cut_ws(   ws,   binwidth = 1,   ws_max = NA,   squish = TRUE,   right = TRUE,   reverse = FALSE,   calm = NA )"},{"path":"/reference/cut_ws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut wind velocity (or others) into factor classes — cut_ws","text":"ws numeric vector wind velocity binwidth width bins ws_max cut wind speed maximum squish TRUE wind velocities greater include additional level \">ws_max\" right logical, indicating intervals closed right (open left) vice versa. reverse reverse order result. sometimes useful plotting factor. calm threshold calm wind situation. windspeed limit assigned factor level \"calm\".","code":""},{"path":"/reference/cut_ws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut wind velocity (or others) into factor classes — cut_ws","text":"","code":"ws <- c(0.3, 1.1, 2.2, 3.3, 4.4, 5, 8.8)  cut_ws(ws, binwidth = 2) #> [1] [0,2]  [0,2]  (2,4]  (2,4]  (4,6]  (4,6]  (8,10] #> Levels: [0,2] < (2,4] < (4,6] < (6,8] < (8,10]  # if ws_max not a multiple of binwidth, the last level before squishing will be cut short cut_ws(ws, binwidth = 2, ws_max = 5) #> [1] [0,2] [0,2] (2,4] (2,4] >4    >4    >4    #> Levels: [0,2] < (2,4] < >4  # calm support: all wind speed below threshold will be gathered in the class calm cut_ws(ws, ws_max = 5, calm = 0.5) #> [1] calm  (1,2] (2,3] (3,4] (4,5] (4,5] >5    #> Levels: calm < (0.5,1] < (1,2] < (2,3] < (3,4] < (4,5] < >5  cut_ws(ws, binwidth = 2, ws_max = 5, squish = FALSE) #> Maximum greater than cut off value. Squishing data #> [1] [0,2] [0,2] (2,4] (2,4] >4    >4    >4    #> Levels: [0,2] < (2,4] < >4  # close the intervals on the left side # unfortunately there is a issue in converting the console output to # html: the unicode character for >= gets scrambled to = # https://github.com/r-lib/evaluate/issues/59 cut_ws(ws, binwidth = 2, ws_max = 5, right = FALSE) #> [1] [0,2) [0,2) [2,4) [2,4) ≥4    ≥4    ≥4    #> Levels: [0,2) < [2,4) < ≥4  # reverse the order of the factors, useful for legends while plotting cut_ws(ws, binwidth = 2, ws_max = 5, reverse = TRUE) #> [1] [0,2] [0,2] (2,4] (2,4] >4    >4    >4    #> Levels: >4 < (2,4] < [0,2]"},{"path":"/reference/element_render_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"renders a circle as element_line — element_render_circle","title":"renders a circle as element_line — element_render_circle","text":"renders circle element_line","code":""},{"path":"/reference/element_render_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"renders a circle as element_line — element_render_circle","text":"","code":"element_render_circle(theme, element, x, y, r, ..., name = NULL, nseg = 360)"},{"path":"/reference/element_render_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"renders a circle as element_line — element_render_circle","text":"theme theme object element name theme element (see ggplot2::calc_element()). x numeric vector specifying x center locations circles y numeric vector specifying y center locations circles r numeric vector specifying radii circles ... passed onto ggplot2::element_grob() name generated grid object nseg number line segments draw circle","code":""},{"path":"/reference/element_render_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"renders a circle as element_line — element_render_circle","text":"ggplot2::zeroGrob() grid::polylineGrob()","code":""},{"path":"/reference/fit_gam_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a smooth surface to x, y, z data using generalised additive models — fit_gam_surface","title":"Fits a smooth surface to x, y, z data using generalised additive models — fit_gam_surface","text":"based mgcv::gam() derived openair::polarPlot()","code":""},{"path":"/reference/fit_gam_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a smooth surface to x, y, z data using generalised additive models — fit_gam_surface","text":"","code":"fit_gam_surface(   data,   x,   y,   z,   weights = NULL,   k = 100,   extrapolate = FALSE,   force_positive = TRUE,   dist = 0.05 )"},{"path":"/reference/fit_gam_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a smooth surface to x, y, z data using generalised additive models — fit_gam_surface","text":"data data.frame tibble containing data (wide format) x string giving u (wind) component x coordinate, respectively y string giving v (wind) component y coordinate, respectively z string giving response variable weights vector weights fitting x, y value pair; can NULL k numeric, smoothing degree gam model mgcv::gam(z ~ s(x, y, k = k) extrapolate TRUE/FALSE, result fit extends NA values z, thus providing way extrapolation. FALSE, u, v pairs !.na(z) returned, TRUE, also fitted z values within certain distance (dist) x, y returned based mgcv::exclude..far() force_positive TRUE/FALSE, shall fitted values forced positive? dist input mgcv::exclude..far(): far away counts far. Grid data first scaled grid lies exactly unit square, dist distance within unit square","code":""},{"path":"/reference/fit_gam_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a smooth surface to x, y, z data using generalised additive models — fit_gam_surface","text":"tibble variables u, v, z","code":""},{"path":"/reference/format_sprintf.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for sprintf string formatting — format_sprintf","title":"Wrapper for sprintf string formatting — format_sprintf","text":"Can used provide format functions labels ggpltos","code":""},{"path":"/reference/format_sprintf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for sprintf string formatting — format_sprintf","text":"","code":"format_sprintf(fmt)"},{"path":"/reference/format_sprintf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for sprintf string formatting — format_sprintf","text":"fmt sprintf formatting string. see sprintf()","code":""},{"path":"/reference/format_sprintf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for sprintf string formatting — format_sprintf","text":"function formatting x sprintf","code":""},{"path":"/reference/format_sprintf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for sprintf string formatting — format_sprintf","text":"","code":"# add one leading zeroes for 1 digits numbers add_leading_zeroes <- format_sprintf(\"%02d\") add_leading_zeroes(1:10) #>  [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\""},{"path":"/reference/geom_bar_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise z values over binned wind data. — geom_bar_wind","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"calculation done summary_wind(), see documentation details. stat_summary_wind() uses aesthetics ws, wd z map correspondent arguments summary_wind(). computed variables named ws, wd z. geom_bar_wind() extension ggplot2::geom_bar() stat_summary_wind() default stat correct handling factorized x aesthetic. map computed Variables use ggplot2::stat().","code":""},{"path":"/reference/geom_bar_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"","code":"geom_bar_wind(   mapping = NULL,   data = NULL,   stat = \"summary_wind\",   position = \"stack\",   ...,   fun = \"mean\",   fun.args = list(),   nmin = 3,   wd_cutfun = cut_wd.fun(binwidth = 45),   ws_cutfun = cut_ws.fun(binwidth = 1),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_summary_wind(   data = NULL,   mapping = NULL,   geom = \"bar_wind\",   position = \"stack\",   ...,   groupings = grp(),   fun = \"mean\",   fun.args = list(),   nmin = 3,   wd_cutfun = cut_wd.fun(binwidth = 45),   ws_cutfun = cut_ws.fun(binwidth = 1),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_bar_wind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data.frame tibble containing data (wide format) stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. fun function list functions summary. fun.args list extra arguments passed fun. nmin numeric, minimum number values fun, n < nmin: NA returned wd_cutfun function, cut function wind direction (create bins). See cut_wd.fun() options. ws_cutfun function, cut function wind speed. See cut_ws.fun() examples na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. groupings additional groupings. Use helper grp() create","code":""},{"path":"/reference/geom_bar_wind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"ggplot2::layer()","code":""},{"path":"/reference/geom_bar_wind.html","id":"recommendation","dir":"Reference","previous_headings":"","what":"Recommendation","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"facetting functions takes inputs evaluate context dataset. means impossible use computed variable stat asthetic. limitation means summary_wind() good fit ggplot stat. cases simpler summarize data beforehand create plot summarized data. ggwindrose() ggradar() can used create standardized plots.","code":""},{"path":"/reference/geom_bar_wind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise z values over binned wind data. — geom_bar_wind","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data)  # a simple wind rose ggplot(data, aes(x = after_stat(wd), y = after_stat(freq), fill = after_stat(stat))) +   geom_bar_wind(     mapping = aes(wd = wd, ws = ws, z = ws),     ws_cutfun = cut_ws.fun(ws_max = 4),     width = 1,     color = \"white\"   ) +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_fill_viridis_d(direction = -1) #> Warning: Removed 27 rows containing non-finite outside the scale range #> (`stat_summary_wind()`).   # use stat_summary_wind to generate a radar plot using # the polygon geom, position \"identity\" and coord_radar() f <- list(   \"median\",   \"mean\",   \"perc95\" = ~ stats::quantile(., probs = 0.95) )  ggplot(data, aes(x = after_stat(wd), y = after_stat(z), color = after_stat(stat), group = after_stat(stat))) +   stat_summary_wind(     mapping = aes(wd = wd, ws = ws, z = NOx),     geom = \"polygon\", position = \"identity\",     fun = f,     ws_cutfun = function(x) factor(\"ws\"),     fill = NA,     size = 1   ) +   coord_radar(start = - 22.5 / 180 * pi) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0)) +   scale_color_viridis_d(end = 0.8) #> Warning: Removed 767 rows containing non-finite outside the scale range #> (`stat_summary_wind()`).   # ggplot2 doesn't support faceting over a Variable computed in a stat. # But we can summarise the data first and then create the plot. # Less ggplot2 magic, but more transparent for the user data_summarized <- summary_wind(data, ws, wd, NOx, fun = f,   ws_cutfun = function(x) factor(\"ws\") )  ggplot(data_summarized, aes(x = wd, y = NOx, color = stat, group = stat)) +   geom_polygon(size = 1, fill = NA) +   coord_radar(start = - 22.5 / 180 * pi ) +   scale_color_viridis_d(end = 0.8) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0)) +   facet_wrap(vars(stat))   # like faceting the mapping mechanism makes it hard to impossible # to use the grouping argument of summary wind. Do the summarise # external. # For example: how often comes which concentration from a sector data_summarized <- summary_wind(data, ws, wd, NOx,   groupings = grp(     fNOx = ggplot2::cut_number(NO2, 5),     year = lubridate::year(date)   ),   ws_cutfun = cut_number.fun(1) )  ggplot(data_summarized, aes(x = wd, y = freq, fill = forcats::fct_rev(fNOx))) +   geom_bar(stat = \"identity\") +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_fill_viridis_d(direction = -1, name = \"NOx\")"},{"path":"/reference/geom_polar_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Background Raster for polar plots — geom_polar_raster","title":"Background Raster for polar plots — geom_polar_raster","text":"quick really dirty implementation raster rendered whole extend panel.","code":""},{"path":"/reference/geom_polar_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Background Raster for polar plots — geom_polar_raster","text":"","code":"geom_polar_raster(raster, interpolate = TRUE, ...)"},{"path":"/reference/geom_polar_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Background Raster for polar plots — geom_polar_raster","text":"raster raster data plot interpolate interpolate Raster. see grid::rasterGrob() ... unused moment","code":""},{"path":"/reference/geom_polar_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Background Raster for polar plots — geom_polar_raster","text":"ggplot2 layer","code":""},{"path":"/reference/geom_polar_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Background Raster for polar plots — geom_polar_raster","text":"","code":"require(ggplot2)  # prepare map as raster bbox <- tibble::tibble(x = c(2683141 - 500, 2683141 + 500), y = c(1249040 - 500, 1249040 + 500)) bbox <- rOstluft::transform_LV95_to_WSG84(bbox)  bbox <- c(left = bbox$lon[1], right = bbox$lon[2], bottom = bbox$lat[1], top = bbox$lat[2])  raster_map <- ggmap::get_stadiamap(bbox, zoom = 16, color = \"bw\") #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors.   # prepare data fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn)  wide <- rOstluft::rolf_to_openair(data) winkel_sector <- 22.5 wide <- dplyr::mutate(   wide,   wd_shifted = .data$wd - winkel_sector / 2,   wd_class = ggplot2::cut_width(.data$wd_shifted, 22.5),   ws_class = forcats::fct_rev(ggplot2::cut_interval(.data$ws, length = 2)) )  ggplot(wide, aes(x = wd_class, fill = ws_class, y = stat(count / sum(count)))) +   # insert raster as background   geom_polar_raster(raster_map) +   # add plot   geom_bar(width=1, colour=\"grey80\", size=0.5, alpha = 0.5, show.legend = TRUE, na.rm = TRUE) +   scale_x_discrete(drop = FALSE) +   scale_fill_viridis_d(direction = 1) +   coord_polar(start = -((winkel_sector/2)/360) * 2*pi) +   theme(     axis.text.x = ggplot2::element_blank()   ) #> Warning: `stat(count / sum(count))` was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(count / sum(count))` instead."},{"path":"/reference/get_ggmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to load a ggmap — get_ggmap","title":"Wrapper to load a ggmap — get_ggmap","text":"Wrapper load ggmap","code":""},{"path":"/reference/get_ggmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to load a ggmap — get_ggmap","text":"","code":"get_ggmap(   coord,   googlekey = NA,   zoom = 12,   mapstyle = c(feature = \"all\", element = \"labels\", visibility = \"off\"),   maptype = \"terrain\",   mapcolor = \"bw\",   ... )"},{"path":"/reference/get_ggmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to load a ggmap — get_ggmap","text":"coord data.frame tibble coordinates (latlon) defining map extensions form coord = tibble(lon = ..., lat = ..., type = c(\"center\", \"lb\", \"rt\", ...)); reason structure , ggmap::get_googlemap() requires different way (center + zoom) specify map frame ggmap::get_stamenmap() (bounding box). needed, coord converted bounding box bbox() takes type == \"lb\" bottom & left coordinate, \"rt\" top & right, respectively. googlekey google api key character string (see ?ggmap::get_googlemap(); , google map downloaded) , NA, map via  ggmap::get_stamenmap() returned zoom zoom factor ggmap::get_googlemap() mapstyle style parameter ggmap::get_googlemap() maptype parameter ggmap::get_googlemap() mapcolor color parameter ggmap::get_googlemap() ... additional parameter ggmap::get_googlemap() ggmap::get_stamenmap(), respectively","code":""},{"path":"/reference/get_ggmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to load a ggmap — get_ggmap","text":"ggplot2 / ggmap object","code":""},{"path":"/reference/get_google_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around ggmap::get_googlemap — get_google_map","title":"Wrapper around ggmap::get_googlemap — get_google_map","text":"functions get_googlemap() get_stadia_map() tries harmonize calls ggmap(). objective get interchangeable functions sensible defaults. example automatic calculation zoom. function bbox_lv95() generates bbox object compatible functions. using function need register google API key ggmap::register_google(). details consult documentation Maps Static API ggmap::get_googlemap().","code":""},{"path":"/reference/get_google_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around ggmap::get_googlemap — get_google_map","text":"","code":"get_google_map(   bbox,   width = 640,   zoom = \"auto\",   scale = 2,   language = \"de-CH\",   color = \"bw\",   style = c(feature = \"all\", element = \"labels\", visibility = \"off\"),   ... )"},{"path":"/reference/get_google_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around ggmap::get_googlemap — get_google_map","text":"bbox list item center = (lon, lat) WSG84 coordinates. Additional width meters zoom = \"auto\". Use bbox_lv95() create compatible bounding box list width resulting map pixels. divided trough scale calculate size. zoom tile map Integer \"auto\" scale affects size labels. ggmap::get_googlemap() multiplies size factor. language character string providing language map labels (themes ) format \"en-EN\". languages supported; default language used. color color black--white. Changed default \"bw\" style character string named vector style map. powerful complex specification. See Styled Maps documentation google maps platform ... forwarded ggmap::get_googlemap()","code":""},{"path":"/reference/get_google_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around ggmap::get_googlemap — get_google_map","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":"/reference/get_google_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper around ggmap::get_googlemap — get_google_map","text":"","code":"library(ggmap) #> ℹ Google's Terms of Service: <https://mapsplatform.google.com> #>   Stadia Maps' Terms of Service: <https://stadiamaps.com/terms-of-service/> #>   OpenStreetMap's Tile Usage Policy: <https://operations.osmfoundation.org/policies/tiles/> #> ℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details. ggmap::register_google(Sys.getenv(\"GGMAP_GOOGLE_API_KEY\")) bb <- bbox_lv95(2683141, 1249040, 500) # site Zch_Stamfenbachstrasse get_google_map(bb) %>%  ggmap::ggmap() #> ℹ <https://maps.googleapis.com/maps/api/staticmap?center=47.386943,8.53975&zoom=15&size=320x320&scale=2&maptype=terrain&language=de-CH&style=feature:all%7Celement:labels%7Cvisibility:off&key=xxx>"},{"path":"/reference/get_stadia_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"functions get_googlemap() get_stadia_map() tries harmonize calls ggmap(). objective get interchangeable functions sensible defaults. example automatic calculation zoom. function bbox_lv95() generates bbox object compatible functions.","code":""},{"path":"/reference/get_stadia_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"","code":"get_stadia_map(   bbox,   maptype = \"stamen_terrain\",   width = 640,   zoom = \"auto\",   color = \"bw\",   ... )"},{"path":"/reference/get_stadia_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"bbox list items left, bottom, right top WSG84 coordinates. Additional width meters zoom = \"auto\". Use bbox_lv95() create compatible bounding box list maptype stamen_terrain, stamen_toner, stamen_toner_lite, stamen_watercolor, stamen_terrain_background, stamen_toner_background, stamen_terrain_lines, stamen_terrain_labels, stamen_toner_lines, stamen_toner_labels. width resulting map pixels. zoom zoomlevel 0 18 \"auto\" color color black--white. Changed default \"bw\" ... forwarded ggmap::get_stadiamap()","code":""},{"path":"/reference/get_stadia_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":"/reference/get_stadia_map.html","id":"api-key","dir":"Reference","previous_headings":"","what":"API-Key","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"obtain API key enable services, go https://client.stadiamaps.com/signup/. completely free non-commercial evaluation use (license commercial use; see https://stadiamaps.com/pricing pricing), credit card required sign . details see ggmap::register_stadiamaps().","code":""},{"path":"/reference/get_stadia_map.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"Details attribution can found https://stadiamaps.com/attribution.","code":""},{"path":"/reference/get_stadia_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper around ggmap::get_stadiamap() — get_stadia_map","text":"","code":"bb <- bbox_lv95(2683141, 1249040, 500) # site Zch_Stamfenbachstrasse get_stadia_map(bb) |>   ggmap::ggmap() #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors."},{"path":"/reference/ggcalendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar time series plot with tiles — ggcalendar","title":"Calendar time series plot with tiles — ggcalendar","text":"ggcalendar calculates necessary date components creates ggplot object correct mappings cal_* components. cal_month_border uses ggplot2::geom_segment() draw border around months. cal_label wrapper around ggplot2::geom_text() (ggplot2::geom_label() used).","code":""},{"path":"/reference/ggcalendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar time series plot with tiles — ggcalendar","text":"","code":"ggcalendar(   data,   x = \"date\",   z = \"O3_max_h1\",   size = 0.1,   color = \"white\",   ...,   locale = Sys.getlocale(\"LC_TIME\") )  cal_month_border(   size = 0.5,   lineend = \"square\",   linejoin = \"bevel\",   color = \"grey5\",   ... )  cal_label(   mapping = NULL,   stat = \"identity\",   data = NULL,   geom = \"text\",   position = \"identity\",   show.legend = FALSE,   inherit.aes = TRUE,   na.rm = TRUE,   size = 2,   color = \"white\",   ... )"},{"path":"/reference/ggcalendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar time series plot with tiles — ggcalendar","text":"data input data x date column Date, POSIXct Character z value columns size parameter passed geom_tile() => space tiles color parameter passed geom_tile() => color space tiles ... options ggplot2::geom_tile() locale locale string lubridate::month() lubridate::wday(). See Sys.getlocale() lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geom used layer. \"label\" alternative position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed.","code":""},{"path":"/reference/ggcalendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar time series plot with tiles — ggcalendar","text":"ggplot2 object ggplot2 layer ggplot2 layer","code":""},{"path":"/reference/ggcalendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar time series plot with tiles — ggcalendar","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  # keep only 2 years for smaller plotsize df <-  rOstluft::read_airmo_csv(fn) %>%  dplyr::filter(starttime < lubridate::ymd(20120101)) %>%  rOstluft::resample(new_interval = \"d1\") %>%  rOstluft::rolf_to_openair()  ggcalendar(df, z = \"PM10\") +   scale_fill_viridis_c(direction = -1, option = \"magma\", na.value = NA)   # can be customised... ggcalendar(df, z = \"PM10\") +   scale_fill_viridis_c(direction = -1, option = \"magma\", na.value = NA) +   cal_month_border(color = \"black\") +   stat_filter(aes(filter = PM10 > 50),  position = position_nudge(y = 0.25),               size = 1, shape = 21, color = \"white\", fill = \"white\") +   cal_label(aes(label = round(PM10,0)))"},{"path":"/reference/ggdiurnal.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","text":"ggplot2-wrapper summarise plot data (rOstluft::format_rolf() format) diurnal time course-stats","code":""},{"path":"/reference/ggdiurnal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","text":"","code":"ggdiurnal(   data,   y = \"value\",   fun = list(middle = \"mean\", middle2 = \"median\", ymin = \"percentile05\", lower =     \"percentile25\", upper = \"percentile75\", ymax = \"percentile95\"),   nmin = 3,   ribbon_color = \"gray60\",   middle_color = \"gray30\",   expand_xscale = 0.025 )"},{"path":"/reference/ggdiurnal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","text":"data data.frame tibble containing data y character string specifying taget variable summarised, usually \"value\". outcomes cut_timeseries_periodic(). fun function list functions summary, can named (outut stat named function's name); Strings matching regular expression /^percentile([0-9]){1,2}$/converted respective function. \"percentile95\" => function(x, ...) quantile(x, 95 / 100, ...) nmin numeric, minimum number values fun, n < nmin: NA returned ribbon_color character string specifying ribbon color. middle_color character string specifying middle's color. expand_xscale multiplicative range expansion factor","code":""},{"path":"/reference/ggdiurnal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggdiurnal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats — ggdiurnal","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data_min30 <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(parameter %in% c(\"NOx\", \"O3\", \"PM10\"))  data_h1 <- rOstluft::resample(data_min30, new_interval = \"h1\")  ggdiurnal(data_h1)   # change scale_expands: less margin on x, no expand lower y and set to zero ggdiurnal(data_h1, expand_xscale = 0.01) +   scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.05))) +   theme(panel.spacing.y = unit(12, \"pt\"))   # 30min resolution, add title, x/y label (must set theme elements) ggdiurnal(data_min30) +   ggtitle(\"Diurnal Zuerich Stampfenbachstrasse 2010-2014 \") +   ylab(\"parameter\") +   xlab(\"time\") +   theme(     axis.title = element_text(),     axis.title.x = element_text()   )"},{"path":"/reference/ggdiurnal_weekend.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","text":"ggplot2-wrapper summarise plot data (rOstluft::format_rolf() format) diurnal time course-stats including weekend-effect","code":""},{"path":"/reference/ggdiurnal_weekend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","text":"","code":"ggdiurnal_weekend(   data,   y = \"value\",   nmin = 3,   fun = list(middle = \"mean\", middle2 = \"median\", ymin = \"percentile05\", lower =     \"percentile25\", upper = \"percentile75\", ymax = \"percentile95\"),   ribbon_color = \"gray60\",   middle_color = \"gray30\",   expand_xscale = 0 )"},{"path":"/reference/ggdiurnal_weekend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","text":"data data.frame tibble containing data y character string specifying taget variable summarised, usually \"value\". outcomes cut_timeseries_periodic(). nmin numeric, minimum number values fun, n < nmin: NA returned fun function list functions summary, can named (outut stat named function's name); Strings matching regular expression /^percentile([0-9]){1,2}$/converted respective function. \"percentile95\" => function(x, ...) quantile(x, 95 / 100, ...) ribbon_color character string specifying ribbon color. middle_color character string specifying middle's color. expand_xscale multiplicative range expansion factor","code":""},{"path":"/reference/ggdiurnal_weekend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggdiurnal_weekend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for diurnal time course-stats including weekend-effect — ggdiurnal_weekend","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(parameter %in% c(\"NOx\", \"O3\", \"PM10\")) %>%   rOstluft::resample(new_interval = \"h1\")  ggdiurnal_weekend(data)   # y scale: no expand on zero ggdiurnal_weekend(data) +   scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.05))) +   theme(panel.spacing.y = unit(12, \"pt\"))"},{"path":"/reference/ggdiurnal_weekend_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","text":"ggplot2-wrapper summarise plot data (rOstluft::format_rolf() format) one diurnal time course-stat plotted difference weekdays - weekend","code":""},{"path":"/reference/ggdiurnal_weekend_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","text":"","code":"ggdiurnal_weekend_diff(   data,   y = \"value\",   nmin = 3,   fun = list(middle = \"mean\"),   expand_xscale = 0.025,   ... )"},{"path":"/reference/ggdiurnal_weekend_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","text":"data data.frame tibble containing data y character string specifying taget variable summarised, usually \"value\". outcomes cut_timeseries_periodic(). nmin numeric, minimum number values fun, n < nmin: NA returned fun function list functions summary, can named (outut stat named function's name); Strings matching regular expression /^percentile([0-9]){1,2}$/converted respective function. \"percentile95\" => function(x, ...) quantile(x, 95 / 100, ...) expand_xscale multiplicative range expansion factor ... arguments passed ggplot2::geom_line().","code":""},{"path":"/reference/ggdiurnal_weekend_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggdiurnal_weekend_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) for one diurnal time course-stat plotted as difference between weekdays - weekend — ggdiurnal_weekend_diff","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(parameter %in% c(\"NOx\", \"O3\", \"PM10\")) %>%   rOstluft::resample(new_interval = \"h1\")  ggdiurnal_weekend_diff(data)"},{"path":"/reference/ggpolarfreq.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","title":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","text":"Using summary_wind() calculate und plot summary statisitics wind direction wind velocity bins. Primarily plots wind speed/direction frequencies. bin colour-coded depending frequency measurements. Bins can also used show concentration pollutants using range commonly used statistics.","code":""},{"path":"/reference/ggpolarfreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","text":"","code":"ggpolarfreq(   data,   ws,   wd,   z = NULL,   wd_binwidth = 45,   ws_binwidth = 1,   ws_max = NA,   groupings = grp(),   fun = \"frequency\",   fun.args = list(),   nmin = 1,   fill_scale = scale_fill_viridis_c(labels = scales::percent),   bg = NULL,   calm = NA,   calm.prefix = \"Calm\\n\",   calm.accuracy = 1,   calm.color = \"black\",   calm.size = 3.88,   yexpand = 0.2,   ... )"},{"path":"/reference/ggpolarfreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","text":"data data.frame tibble containing data (wide format) ws NULL symbol giving wind velocity parameter name (wind velocity preferably m/s) wd symbol giving wind direction parameter name z symbol giving parameter name summarised wd_binwidth width wind direction bins degrees wind  direction (must fullfill binwidth %% 360 / c(4, 8, 16, 32)) ws_binwidth width wind speed bins ws_max ws_max specified, bin >ws_max included groupings additional groupings. Use helper grp() create fun function list functions summary. fun.args list extra arguments passed fun. nmin numeric, minimum number values fun, n < nmin: NA returned fill_scale ggplot2 discrete fill scale, e.g. ggplot2::scale_fill_gradientn() bg bg raster map, e.g. ggmap object plot background calm specified numeric windspeed value treated calm proportion displayed text center. color, size text can supplied calm.size calm.color. prefix text can defined calm.prefix accuracy number calm.accuracy calm.prefix prefix calm text string. Supplied scales::label_percent() argument. calm.accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL uses heuristic ensure breaks minimum number digits needed show difference adjacent values. calm.color text color calm.size text size yexpand size empty calm circle center percentage y scale ... arguments passed ggplot2::geom_bar(). Used set aesthetic fixed value. Defaults color = \"white\", width = 1, size = 0.25","code":""},{"path":"/reference/ggpolarfreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggpolarfreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 wrapper to to plot wind speed/direction frequencies and other statistics — ggpolarfreq","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Schimmelstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair() %>%   openair::cutData(type = \"season\")  # data with empty sectors npoints <- 1000 data2 <- tibble::tibble(   wd = runif(npoints, 90, 315),   ws = runif(npoints, 0, 6) )  # more bin, wider bars ggpolarfreq(data2, ws, wd, wd_binwidth = 22.5, width = 1)   # squish wind speed ggpolarfreq(data2, ws, wd, ws_max = 4)   # add a lower limit for wind speed (calm) ggpolarfreq(data2, ws, wd, ws_max = 4, calm = 0.5)   # with real data ggpolarfreq(data, ws, wd, ws_max = 2, ws_binwidth = 0.5)   # use grp for faceting ggpolarfreq(data, ws, wd, ws_max = 2, ws_binwidth = 0.5, groupings = grp(season)) +   facet_wrap(vars(season))   # show the frequency of a pollutant measurement ggpolarfreq(   data = data,   ws = ws,   wd = wd,   z = \"NOx\",   ws_max = 2,   ws_binwidth = 0.5, ) + labs(title = \"Frequency of NOx Measurements\")   # use z and provide a stat function, also provide fill_scale for # correct formating ggpolarfreq(   data = data,   ws = ws,   wd = wd,   z = \"NOx\",   fun = \"mean\",   fun.args = list(na.rm = TRUE),   ws_max = 2,   ws_binwidth = 0.5,   fill_scale = scale_fill_viridis_c() ) + labs(title = \"Mean value of NOx\")   ggpolarfreq(   data = data,   ws = ws,   wd = wd,   z = \"NOx\",   fun = ~quantile(., probs = 0.95),   fun.args = list(na.rm = TRUE),   ws_max = 2,   ws_binwidth = 0.5,   fill_scale = scale_fill_viridis_c() ) + labs(title = \"95% Percentile of NOx\")"},{"path":"/reference/ggpolarplot.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","title":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","text":"Inspired derived openair::polarPlot(), .e. applying stat function data yield wind direction + wind velocity heatmap, (cartesian u, v wind component space); includes options smoothing, flexible grid setting, flexible stat functions, data extrapolation plotting raster map.","code":""},{"path":"/reference/ggpolarplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","text":"","code":"ggpolarplot(   data,   ws,   wd,   z,   groupings = grp(),   fun = \"mean\",   fun.args = list(na.rm = TRUE),   nmin = 3,   ws_max = NA,   smooth = TRUE,   k = 200,   extrapolate = TRUE,   dist = 0.1,   pixels = 80^2,   fill_scale = scale_fill_gradientn(colours = matlab::jet.colors(20), na.value = NA),   ylabels = scales::unit_format(unit = \"m/s\"),   breaks = waiver(),   bg = NULL,   ... )"},{"path":"/reference/ggpolarplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","text":"data tibble containing wind speed, wind direction air pollutant data ws symbol giving wind velocity parameter name (wind velocity preferably m/s) wd symbol giving wind direction parameter name  degrees z symbol giving parameter name summarised groupings additional groupings. Use helper grp() create fun function list functions summary. fun.args list extra arguments pass fun. nmin numeric, minimum number values fun, n < nmin: NA returned ws_max numeric Inf, maximum wind velocity binning: ws_max, z set NA smooth TRUE/FALSE, applies groups = c(\"u\", \"v\"); smoothing summary results performed using fit_gam_surface()? k numeric, applies smooth = TRUE; degree smoothing smooth term fit_gam_surface() extrapolate TRUE/FALSE, applies smooth = TRUE; fit_gam_surface() returns extrapolated (predicted) values u, v coordinates otherwise NA summarised z extrapolate = TRUE, values returned (certain degree depending value dist) dist numeric, fraction 1, applies smooth = TRUE extrapolate = TRUE; maximum distance next coordinate-pair result fit_gam_surface(z) returned pixels number bins 2-dimensional u, v wind component coordinate system fill_scale ggplot2 continuous fill scale, e.g. scale_fill_gradientn(). prefered scale can added later returned ggplot object, message scale replaced printed. ylabels function format ylabels. Default adds unit \" m/s\" breaks waiver() numeric vector, provides y-axis breaks bg raster map, e.g. ggmap object plot background ... arguments passed ggplot2::geom_raster(). Used set aesthetic fixed value","code":""},{"path":"/reference/ggpolarplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggpolarplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 wrapper to create a wind-based polar plot with cartesian coords — ggpolarplot","text":"","code":"library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  df <- rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair() %>%   dplyr::mutate(wday = lubridate::wday(date, label = TRUE, week_start = 1))  # simple ggpolarplot(df, wd = wd, ws = ws, z = NOx) #> Warning: Removed 3772 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # change smoothing degree, add custom breaks and change grid style, different fill scale fs <- scale_fill_viridis_c(na.value = NA) ggpolarplot(df, wd = wd, ws = ws, z = NOx, k = 25, fill_scale = fs, breaks = seq(0,8,2))  +   theme(panel.grid.major = element_line(linetype = 2, size = 0.25, color = \"gray80\")) #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> Warning: Removed 3772 rows containing missing values or values outside the scale range #> (`geom_raster()`).    # no data extrapolation ggpolarplot(df, wd = wd, ws = ws, z = NOx, extrapolate = FALSE, breaks = seq(0,8,2)) #> Warning: Removed 5402 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # no smoothing ggpolarplot(df, wd = wd, ws = ws, z = NOx, smooth = FALSE, breaks = seq(0,8,2)) #> Warning: Removed 5402 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # squish maximum NOx concentration and cut off wind velocity at 4 m/s fs = scale_fill_viridis_squished(limits = c(0,50), breaks = seq(0,50,10), na.value = NA) ggpolarplot(df, wd = wd, ws = ws, z = NOx, ws_max = 4,  fill_scale = fs,             smooth = FALSE, breaks = c(0, 2, 4)) #> Warning: Removed 3450 rows containing missing values or values outside the scale range #> (`geom_raster()`).    # like jet colors better, want it smoothed? ggpolarplot(df, wd = wd, ws = ws, z = NOx, ws_max = 4, smooth = TRUE, breaks = 0:4) +   scale_fill_gradientn_squished(limits = c(0,50), breaks = seq(0,50,10),                                 na.value = NA, colors = matlab::jet.colors(100)) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Warning: Removed 1740 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # change binning parameters ggpolarplot(df, wd = wd, ws = ws, z = NOx, smooth = FALSE, pixels = 50^2,             nmin = 10, breaks = seq(0,6,2)) #> Warning: Removed 2140 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # facetting variable must be included in grp ggpolarplot(df, wd = wd, ws = ws, z = NOx, groupings = grp(wday),             ws_max = 4, pixels = 50^2, k = 25, breaks = c(0, 2, 4)) +   facet_wrap(vars(wday)) #> Warning: Removed 6006 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # different stat fun ggpolarplot(df, wd = wd, ws = ws, z = NOx, fun = \"quantile\",             fun.args = list(probs = 0.95, na.rm = TRUE),             breaks = seq(0,10,2)) #> Warning: Removed 3772 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # facetting by stat ggpolarplot(df, wd = wd, ws = ws, z = NOx, fun = list(\"mean\", \"median\"), ws_max = 4,              pixels = 50^2, k = 25, breaks = c(0, 2, 4)) +   facet_wrap(vars(stat)) #> Warning: Removed 1230 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # background map, just remember the location on the map has no correlation with # the overlaying data. Only the direction. bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. fs <- scale_fill_gradientn_squished(   limits = c(0,50), breaks = seq(0,50,10),   na.value = NA, colors = matlab::jet.colors(20) )  ggpolarplot(df, wd = wd, ws = ws, z = NOx, ws_max = 4,             bg = bg, alpha = 0.6,             fill_scale = fs, smooth = TRUE, breaks = c(0,2,4)) +   theme(     panel.grid.major = element_line(linetype = 2, color = \"black\", size = 0.5)   ) #> Warning: Removed 1740 rows containing missing values or values outside the scale range #> (`geom_raster()`)."},{"path":"/reference/ggradar.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","title":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","text":"ggplot2-wrapper summarise plot data wind direction bins radar plot","code":""},{"path":"/reference/ggradar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","text":"","code":"ggradar(   data,   wd,   y,   group = stat,   mapping = NULL,   facet_groups = grp(),   wd_binwidth = 45,   fun = \"mean\",   fun.args = list(),   nmin = 3,   fun_reorder = identity,   bg = NULL,   ... )"},{"path":"/reference/ggradar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","text":"data tibble containing wind speed, wind direction air pollutant concentration data wd symbolic giving wind direction column name y symbolic giving wind direction column name group symbolic expression defining grouping ggplot2::geom_polygon(). Defaulting stat column returned summary_wind() mapping add overwrite mappings. default aes(x = lon, y = lat, group = date, color = height) (x wind direction y parameter interest); details, check examples facet_groups symbolic expression specifying variable(s) facetting; passed summary_wind() using grp() function (facet_groups groups passed summary_wind() groupings argument); default = groups() wd_binwidth numeric, binwidth wind direction °, wd_binwidth fullfill: (360 / wd_binwidth) %% c(4, 8, 16, 32) fun character string vector character strings, stat function(s) applied wind direction bins fun.args list, arguments fun nmin numeric, minimum number data points averaged one wind direction bin fun_reorder function (default identity()) used reorder factor levels mapping's group variable (can useful change fill order, see examples) bg raster map, e.g. ggmap object plot background ... parameters passed ggplot2::geom_polygon()","code":""},{"path":"/reference/ggradar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggradar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-wrapper to summarise and plot data by wind direction bins as radar plot — ggradar","text":"","code":"library(ggplot2) library(dplyr) library(tidyr)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair() %>%   dplyr::mutate(wday = lubridate::wday(date, label = TRUE, week_start = 1))  # wind direction radar chart with mean values of y as summary statistics ggradar(data, wd, NOx)   # don't like the legend? ggradar(data, wd, NOx, show.legend = FALSE)   # wind direction radar chart with pre-calculated summary stats # (same as above) df <- data %>%    dplyr::filter(!is.na(.data$wd)) %>%    dplyr::mutate(wd = cut_wd(.data$wd, binwidth = 45)) %>%    dplyr::group_by(.data$wd) %>%    dplyr::summarise(NOx = mean(.data$NOx, na.rm = TRUE)) %>%    dplyr::ungroup()  # we can provide a string as group, in the case no variable # for group exists in the data ggradar(df, wd, NOx, \"mean\", fun = \"identity\", show.legend = FALSE)   # same as above but with defined fill and alpha, no color ggradar(data, wd, NOx, fill = \"gray30\", alpha = 0.5, color = NA)   # same as above but with no fill, defined color etc ggradar(data, wd, NOx, fill = NA, color = \"steelblue\", lwd = 1)   # higher wind direction resolution (actually: highest with predefined labels) ggradar(data, wd, NOx, wd_binwidth = 11.25,         fill = \"gray30\", alpha = 0.5)   # apply different statistic function q95 <- function(x, ...) quantile(x, 0.95, ...) ggradar(data, wd, NOx, fun = list(q95 = q95), alpha = 0.5)   # group by multiple statistic functions and omit polygon filling ggradar(data, wd, NOx,         fun = list(\"mean\", \"median\", \"perc95\" = q95), fill = NA)   # ... adjust x and color and fill scales and reorder stat levels for appropriate fill order q05 <- function(x, ...) quantile(x, 0.05, ...) q95 <- function(x, ...) quantile(x, 0.95, ...) stat_reorder <- function(stat) {   factor(stat, levels = rev(c(\"perc05\", \"median\", \"mean\", \"perc95\"))) } ggradar(data, wd, NOx,      fun = list(\"perc05\" = q05, \"median\", \"mean\", \"perc95\" = q95),      fun_reorder = stat_reorder, color = NA, alpha = 0.9) +    scale_y_continuous(limits = c(0,120)) +    scale_fill_viridis_d(begin = 0.2) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   # ... same as above but with one-colored fill and stats as facets ggradar(data, wd, NOx,         fun = list(\"mean\", \"median\", \"perc95\" = q95),         fill = \"steelblue\",         show.legend = FALSE) +   facet_wrap(vars(stat), ncol = 2)   # multiple y-parameters and facetting (facetting variable has to be separately # specified in facet_groups!) df2 <- dplyr::select(data, wd, NO, NOx, wday, date) %>%   tidyr::gather(par, val, -wd, -wday, -date)  ggradar(df2, wd, val, wday,         facet_groups = grp(par), fill = NA) +   facet_wrap(vars(par))   # same as above, but calculate grouping on the fly with an expression ggradar(df2, wd, val, group = lubridate::wday(date, label = TRUE, week_start = 1),         facet_groups = grp(par), fill = NA) +   labs(color = \"Week day\") +   facet_wrap(vars(par))   # with background map bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. ggradar(data, wd, NOx, bg = bg, color = \"blue\", fill = \"blue\", alpha = 0.5) +   theme(panel.grid.major = ggplot2::element_line(linetype = 1, color = \"white\"))"},{"path":"/reference/ggtraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting hysplit trajectory — ggtraj","title":"Plotting hysplit trajectory — ggtraj","text":"Plotting hysplit trajectory","code":""},{"path":"/reference/ggtraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting hysplit trajectory — ggtraj","text":"","code":"ggtraj(   data,   mapping = NULL,   incr = -seq(24, 96, 24),   lims = NULL,   add_traj_labels = TRUE,   color_scale = ggplot2::scale_color_viridis_c(name = \"m agl.\") )"},{"path":"/reference/ggtraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting hysplit trajectory — ggtraj","text":"data tibble containing hysplit trajectories, format preferably similar 'openair' package mapping add overwrite mappings. default aes(x = lon, y = lat, group = date, color = height) incr sequence hours draw marker trajetory. Default -seq(24,96,24); NULL increment markers plotted lims list xlim ylim items defining map section. See ggplot2::coord_quickmap() add_traj_labels add text labels date time every trajectory color_scale ggplot2 color scale","code":""},{"path":"/reference/ggtraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting hysplit trajectory — ggtraj","text":"ggplot2 object","code":""},{"path":"/reference/ggtraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting hysplit trajectory — ggtraj","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"2017_ZH-Kaserne-hysplit.rds\") traj <- readRDS(fn) start <- lubridate::ymd(\"2017-03-08\", tz = \"UTC\") end <- lubridate::ymd(\"2017-03-14\", tz = \"UTC\") traj <- dplyr::filter(traj,   dplyr::between(date, start, end) ) ggtraj(traj)   # air pollutant instead of trajectory height # can be interesting e.g. with long-range transport of EC, # but we don't have EC data ready at hand, so we use PM2.5 here instead data_2017 <-   rOstluft.data::f(\"Zch_Stampfenbachstrasse_min30_2017.csv\") %>%   rOstluft::read_airmo_csv() %>%   rOstluft::rolf_to_openair()  data_traj <-   dplyr::select(data_2017, -site) %>%   dplyr::right_join(traj, by = \"date\")  cs <- scale_color_viridis_c(name = \"PM2.5\", direction = -1) ggtraj(data_traj, aes(color = PM2.5), color_scale = cs)"},{"path":"/reference/ggweekend.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","text":"ggplot2-wrapper summarise plot data (rOstluft::format_rolf() format) boxplots comparing weekdays weekends","code":""},{"path":"/reference/ggweekend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","text":"","code":"ggweekend(   data,   y = \"value\",   nmin = 3,   fun = list(middle = \"mean\", middle2 = \"median\", ymin = \"percentile05\", lower =     \"percentile25\", upper = \"percentile75\", ymax = \"percentile95\"),   ... )"},{"path":"/reference/ggweekend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","text":"data data.frame tibble containing data y character string specifying taget variable summarised, usually \"value\". outcomes cut_timeseries_periodic(). nmin numeric, minimum number values fun, n < nmin: NA returned fun function list functions summary, can named (outut stat named function's name); Strings matching regular expression /^percentile([0-9]){1,2}$/converted respective function. \"percentile95\" => function(x, ...) quantile(x, 95 / 100, ...) ... arguments passed ggplot2::geom_boxplot().","code":""},{"path":"/reference/ggweekend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggweekend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-wrapper to summarise and plot data (of rOstluft::format_rolf() format) as boxplots comparing weekdays to weekends — ggweekend","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(parameter %in% c(\"NOx\", \"O3\", \"PM10\")) %>%   rOstluft::resample(new_interval = \"h1\")  ggweekend(data)   # change y axis title using bquote ggweekend(data) +   ylab(bquote(\"Konzentration \" ~ 0[3] ~ \", \" ~ PM[10] ~ \"(\" ~ mu ~ \"g \" ~ m^{-3} ~ \"), NOx (ppb)\" ))   # change fill scale ggweekend(data) +   scale_fill_brewer(type = \"qual\", palette = \"Pastel1\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"/reference/ggwindrose.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","title":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","text":"ggplot wrapper create windrose (polar wind-bin frequency plot)","code":""},{"path":"/reference/ggwindrose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","text":"","code":"ggwindrose(   data,   ws,   wd,   wd_binwidth = 45,   ws_binwidth = 1,   ws_max = NA,   groupings = grp(),   nmin = 1,   fill_scale = scale_fill_viridis_d(),   reverse = TRUE,   bg = NULL,   ... )"},{"path":"/reference/ggwindrose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","text":"data tibble containing wind speed, wind direction /air pollutant concentration data ws symbol giving wind velocity column name (wind velocity preferably m/s) wd symbol giving wind direction column name  degrees wd_binwidth numeric, binwidth wind direction °, wd_binwidth fullfill: (360 / wd_binwidth) %% c(4, 8, 16, 32) ws_binwidth numeric, binwidth wind speed ws_max numeric, can NA, wind speed squished value groupings additional groupings. Use helper grp() create. Necessary facets! nmin numeric, minimum number values fun, n < nmin: NA returned fill_scale ggplot2 discrete fill scale, e.g. ggplot2::scale_fill_gradientn() reverse TRUE/FALSE, wind speed bin factors sorted descending (TRUE) ascending (FALSE). Usually wind roses descending order (higher wind speed outside) used. bg raster map, e.g. ggmap object plot background ... arguments passed ggplot2::geom_bar(). Used set aesthetic fixed value. Defaults color = \"white\", width = 1, size = 0.25","code":""},{"path":"/reference/ggwindrose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggwindrose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot wrapper to create a windrose (polar wind-bin frequency plot) — ggwindrose","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair() %>%   openair::cutData(date, type = \"daylight\")  ggwindrose(data, ws, wd)   # squish ws ggwindrose(data, ws, wd, ws_max = 5)   # change binning ggwindrose(data, ws, wd, wd_binwidth = 22.5, ws_binwidth = 1.5, ws_max = 4.5)   # don't like bar outlines? ggwindrose(data, \"ws\", \"wd\", color = \"black\", ws_max = 4)   # bigger outlines ggwindrose(data, ws, wd, ws_max = 5, size = 1)   # a map as background bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. ggwindrose(data, ws, wd, ws_max = 5, alpha = 0.8, bg = bg) +   theme(     panel.grid.major = element_line(linetype = 2, color = \"black\", size = 0.5)    )   # another fill scale ggwindrose(data, ws, wd, ws_max = 5,            fill_scale = scale_fill_manual(values = matlab::jet.colors(6)))   # reverse the coloring of the fill ggwindrose(data, ws, wd, ws_max = 4,            fill_scale = scale_fill_viridis_d(direction = -1))   # reverse the order of ws, but keep the coloring and legend order ggwindrose(data, ws, wd, ws_max = 4, reverse = FALSE,            fill_scale = scale_fill_viridis_d(direction = -1))   # faceting: important the faceting variable, must also be in grouping! ggwindrose(data, ws, wd, ws_max = 5, groupings = grp(daylight)) +   facet_wrap(vars(daylight))   # you can use groupings to directly mutate the data for faceting. # in this example we define the groupings external for better # readability groupings = grp(   season = cut_season(date, labels = c(DJF = \"winter\", MAM = \"spring\",                       JJA = \"summer\", SON = \"autumn\")),   year = cut_seasonyear(date, label = \"year\") )  # only three years for smaller plot size and cut the last december # theming remove the NOSW labels and reduce the y spacing between plots data <- dplyr::filter(data, date < lubridate::ymd(20121201)) ggwindrose(data, ws, wd, ws_max = 3, groupings = groupings) +   facet_grid(rows = vars(year), cols = vars(season)) +   theme(     axis.text.x = element_blank(),     panel.spacing.y = unit(0, \"pt\")   )"},{"path":"/reference/ggwindrose2.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","title":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","text":"ggplot wrapper create windrose calm support (polar wind-bin frequency plot)","code":""},{"path":"/reference/ggwindrose2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","text":"","code":"ggwindrose2(   data,   ws,   wd,   wd_binwidth = 45,   ws_binwidth = 1,   ws_max = NA,   groupings = grp(),   nmin = 1,   fill_scale = scale_fill_viridis_d(),   reverse = TRUE,   bg = NULL,   calm = NA,   calm.prefix = \"Calm\\n\",   calm.accuracy = 1,   calm.color = \"black\",   calm.size = 3.88,   yexpand = 0.2,   ... )"},{"path":"/reference/ggwindrose2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","text":"data tibble containing wind speed, wind direction /air pollutant concentration data ws symbol giving wind velocity column name (wind velocity preferably m/s) wd symbol giving wind direction column name  degrees wd_binwidth numeric, binwidth wind direction °, wd_binwidth fullfill: (360 / wd_binwidth) %% c(4, 8, 16, 32) ws_binwidth numeric, binwidth wind speed ws_max numeric, can NA, wind speed squished value groupings additional groupings. Use helper grp() create. Necessary facets! nmin numeric, minimum number values fun, n < nmin: NA returned fill_scale ggplot2 discrete fill scale, e.g. ggplot2::scale_fill_gradientn() reverse TRUE/FALSE, wind speed bin factors sorted descending (TRUE) ascending (FALSE). Usually wind roses descending order (higher wind speed outside) used. bg raster map, e.g. ggmap object plot background calm specified numeric value windspeed value treated calm proportion displayed text center. color, size text can supplied calm.size calm.color. prefix text can defined calm.prefix accuracy number calm.accuracy calm.prefix prefix calm text string. Supplied scales::label_percent() argument. calm.accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL uses heuristic ensure breaks minimum number digits needed show difference adjacent values. calm.color text color calm.size text size yexpand size empty calm circle center percentage y scale ... arguments passed ggplot2::geom_bar(). Used set aesthetic fixed value. Defaults color = \"white\", width = 1, size = 0.25","code":""},{"path":"/reference/ggwindrose2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","text":"ggplot2::ggplot() object","code":""},{"path":"/reference/ggwindrose2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot wrapper to create a windrose with calm support (polar wind-bin frequency plot) — ggwindrose2","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair()  ggwindrose2(data, ws, wd, calm = 0.3)   # squish ws ggwindrose2(data, ws, wd, ws_max = 5, calm = 0.3)   #' # a map as background bb <- bbox_lv95(2683141, 1249040, 500) bg <- get_stadia_map(bb) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. ggwindrose2(data, ws, wd, ws_max = 5, calm = 0.5, alpha = 0.8, bg = bg) +   theme(     panel.grid.major = element_line(linetype = 2, color = \"black\", size = 0.5)    )   # another fill scale ggwindrose2(data, ws, wd, ws_max = 5,            fill_scale = scale_fill_manual(values = matlab::jet.colors(6)))   # reverse the coloring of the fill ggwindrose2(data, ws, wd, ws_max = 4,            fill_scale = scale_fill_viridis_d(direction = -1))   # reverse the order of ws, but keep the coloring and legend order ggwindrose2(data, ws, wd, ws_max = 4, reverse = FALSE,            fill_scale = scale_fill_viridis_d(direction = -1))"},{"path":"/reference/ggyearday.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","title":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","text":"creates heatmap date x-axis time day y-axis; z values fill scale.","code":""},{"path":"/reference/ggyearday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","text":"","code":"ggyearday(   data,   time,   z,   date_breaks = \"1 month\",   date_labels = \"%b\",   ybreaks = seq(6, 18, 6),   ylabels = format_sprintf(\"%02d:00\"),   fill_scale = scale_fill_viridis_c(direction = -1, na.value = NA, option = \"A\"),   ... )"},{"path":"/reference/ggyearday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","text":"data data.frame tibble input data (containing POSIXct variable time parameter). time symbol giving time column z symbol giving z column used fill date_breaks character string input ggplot2::scale_x_date(), e.g. '1 month', defines date breaks x-axis. date_labels character string input ggplot2::scale_x_date(), formatter date labels x-axis. ybreaks numeric vector, specifies y-axis breaks. ylabels function, format function y-axis labels. fill_scale ggplot2 continuous fill scale, e.g. scale_fill_gradient(). ... arguments passed ggplot2::geom_raster().","code":""},{"path":"/reference/ggyearday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","text":"ggplot","code":""},{"path":"/reference/ggyearday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 heatmap for diurnal-yearly time series — ggyearday","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  # only 4 years for smaller plot size in examples df <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(starttime < lubridate::ymd(20140101)) %>%   rOstluft::rolf_to_openair()  ggyearday(df, time = \"date\", z = \"O3\") #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # data with outliers / extreme values => not very informative... ggyearday(df, time = date, z = PM10) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # ...use a custom scale and squish the outliers / extreme values fill_scale <- scale_fill_viridis_squished(breaks=c(0, 25, 50, 75), limits = c(0, 75),                                           direction = -1, na.value = NA, option = \"A\")  ggyearday(df, time = date, z = PM10, fill_scale = fill_scale) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`)."},{"path":"/reference/gg_timevariation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time variations — gg_timevariation","title":"Plot time variations — gg_timevariation","text":"Inspired openair::timeVariation() multiple functions plot diurnal, day hour week, day week monthly variation. functions optimized data long format defaults rolf format rOstluft Package.","code":""},{"path":"/reference/gg_timevariation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time variations — gg_timevariation","text":"","code":"gg_timevariation(   data,   dt = \"starttime\",   y = \"value\",   group = NULL,   id_cols = grp(\"site\", \"parameter\", \"interval\", \"unit\"),   statistic = c(\"mean\", \"median\"),   draw_ci = TRUE,   conf_interval = NULL,   B = 1000,   ylab = ggplot2::waiver(),   ylim = c(NA, NA),   legend_title = NULL,   language_code = \"de\",   geom = ggplot2::geom_line(size = 1),   geom_ci = ggplot2::geom_ribbon(alpha = 0.2) )  gg_timevariation_wday_hour(   data,   dt = \"starttime\",   y = \"value\",   group = NULL,   id_cols = grp(\"site\", \"parameter\", \"interval\", \"unit\"),   statistic = c(\"mean\", \"median\"),   draw_ci = TRUE,   conf_interval = NULL,   ylab = ggplot2::waiver(),   B = 1000,   ylim = c(NA, NA),   legend_title = NULL,   language_code = \"de\",   geom = ggplot2::geom_line(size = 1),   geom_ci = ggplot2::geom_ribbon(alpha = 0.2) )  gg_timevariation_wday(   data,   dt = \"starttime\",   y = \"value\",   group = NULL,   id_cols = grp(\"site\", \"parameter\", \"interval\", \"unit\"),   statistic = c(\"mean\", \"median\"),   draw_ci = TRUE,   conf_interval = NULL,   B = 1000,   ylab = ggplot2::waiver(),   ylim = c(NA, NA),   legend_title = NULL,   language_code = \"de\",   geom = ggplot2::geom_line(size = 1),   geom_ci = ggplot2::geom_ribbon(alpha = 0.2) )  gg_timevariation_month(   data,   dt = \"starttime\",   y = \"value\",   group = NULL,   id_cols = grp(\"site\", \"parameter\", \"interval\", \"unit\"),   statistic = c(\"mean\", \"median\"),   draw_ci = TRUE,   conf_interval = NULL,   B = 1000,   ylab = ggplot2::waiver(),   ylim = c(NA, NA),   legend_title = NULL,   language_code = \"de\",   geom = ggplot2::geom_line(size = 1),   geom_ci = ggplot2::geom_ribbon(alpha = 0.2) )  gg_timevariation_diurnal(   data,   dt = \"starttime\",   y = \"value\",   group = NULL,   id_cols = grp(\"site\", \"parameter\", \"interval\", \"unit\"),   statistic = c(\"mean\", \"median\"),   draw_ci = TRUE,   conf_interval = NULL,   B = 1000,   ylab = ggplot2::waiver(),   ylim = c(NA, NA),   legend_title = NULL,   language_code = \"de\",   geom = ggplot2::geom_line(size = 1),   geom_ci = ggplot2::geom_ribbon(alpha = 0.2) )"},{"path":"/reference/gg_timevariation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time variations — gg_timevariation","text":"data data frame input data hourly time series dt string symbol date time column (default: starttime) y string symbol specifying target column summarised (default: value) group column string used split input data multiple groups. member id_cols eg. parameter site (default NULL) id_cols set columns uniquely identifies observation. Use rOstluft.plot::grp() quoting. default rOstluft.plot::grp(site, parameter, interval, unit) statistic Can “mean” (default) “median”. statistic ‘mean’ mean line 95% confidence interval mean plotted default. ggplot2::mean_cl_boot() used calculated intervals trough bootstrap simulations without assuming normality. statistic ‘median’ median line plotted together 25/75th quantiles plotted. Users can control confidence intervals draw_ci conf_interval draw_ci TRUE draw confidence interval using ggplot2::mean_cl_boot() \"mean\" ggplot2::median_hilow() \"median\". conf_interval \"mean\" (ggplot2::mean_cl_boot()) specifies confidence level (0-1) interval estimation population mean.  \"median\" (ggplot2::median_hilow()) conf_interval coverage probability outer quantiles target. default, 0.5, used, lower upper quantiles computed 0.25 0.75 B number bootstrap resamples ggplot2::mean_cl_boot() ylab provide custom y plot label ylim limits y scale see ggplot2::scale_y_continuous() infos. legend_title provide legend title language_code ISO country code language used weekdays months labels (default: \"de\") geom geom used rendering default ggplot2::geom_line() geom_ci geom used rendering confidence interval. Must support ymin/ymax mapping. default ggplot2::geom_ribbon()","code":""},{"path":"/reference/gg_timevariation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time variations — gg_timevariation","text":"ggplot2::ggplot() object case gg_timevariaton() patchwork::patchwork  object","code":""},{"path":"/reference/gg_timevariation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time variations — gg_timevariation","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::pluck_parameter(\"NOx\", \"NO\", \"NO2\") %>%   rOstluft::resample(new_interval = \"h1\")  # monthly variation of data gg_timevariation_month(data, group = \"parameter\", ylab = \"Konzentration [µg/m3]\") #> plotting with statistic mean and confidence interval of 0.95   # don't draw a confidence interval gg_timevariation_month(data, group = \"parameter\", draw_ci = FALSE, ylab = \"Konzentration [µg/m3]\")   # for faceting the variable must be included in the id_cols gg_timevariation_wday(   data,   group = \"parameter\",   id_cols = grp(site, parameter, interval, unit, season = cut_season(starttime)) ) + facet_wrap(vars(season)) #> plotting with statistic mean and confidence interval of 0.95   # utility function to compose all plots together using patchwork # for advanced use cases you should probably compose the plot yourself # you can use ylim to start all y axis by 0. Lowering B speed up the process. gg_timevariation(   data,   group = \"parameter\",   B = 10,   ylab = \"Konzentration [µg/m3]\",   ylim = c(0, NA) ) #> plotting with statistic mean and confidence interval of 0.95 #> plotting with statistic mean and confidence interval of 0.95 #> plotting with statistic mean and confidence interval of 0.95 #> plotting with statistic mean and confidence interval of 0.95    # you can use wide data, but only with a single pollutant data_wide <- rOstluft::rolf_to_openair(data)  gg_timevariation_wday_hour(   data_wide,   dt = date,   y = NO2,   group = \"site\",   id_cols = grp(site) ) #> plotting with statistic mean and confidence interval of 0.95   # you can also use a function in id_cols to create groups gg_timevariation_diurnal(   data_wide,   dt = date,   y = NO2,   group = \"season\",   id_cols = grp(site, season = cut_season(date)) ) #> plotting with statistic mean and confidence interval of 0.95   # use an alternative geom gg_timevariation_month(   data,   group = \"parameter\",   ylab = \"Konzentration [µg/m3]\",   B = 10,   geom_ci = geom_linerange(size = 2) ) + scale_x_discrete(   expand = expansion(mult = 0.02) ) #> plotting with statistic mean and confidence interval of 0.95 #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"/reference/grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Pass grouping definitions into functions — grp","title":"Pass grouping definitions into functions — grp","text":"Inspired dplyr::vars(), converting strings symbols auto names arguments","code":""},{"path":"/reference/grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pass grouping definitions into functions — grp","text":"","code":"grp(...)"},{"path":"/reference/grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pass grouping definitions into functions — grp","text":"... Variables group . arguments automatically quoted later evaluated context data frame. support unquoting.","code":""},{"path":"/reference/grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pass grouping definitions into functions — grp","text":"named list containing quosures symbols","code":""},{"path":"/reference/grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pass grouping definitions into functions — grp","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_d1_2017.csv\") data <- rOstluft::read_airmo_csv(fn)  # adding group_nest to quickly glance over the groups groupby <- function(df, group = grp()) {   dplyr::group_by(df, !!!group) %>%     dplyr::group_nest() }  # no grouping -> everything will be nested groupby(data) #> # A tibble: 1 × 1 #>   data              #>   <list>            #> 1 <tibble [63 × 6]>  # use a symbol, string or an expression groupby(data, grp(site, \"unit\", lubridate::year(starttime))) #> # A tibble: 11 × 4 #>    site                    unit  `lubridate::year(starttime)`               data #>    <fct>                   <fct>                        <dbl> <list<tibble[,4]>> #>  1 Zch_Stampfenbachstrasse mg/m3                         2017            [3 × 4] #>  2 Zch_Stampfenbachstrasse 1                             2017           [23 × 4] #>  3 Zch_Stampfenbachstrasse %Hr                           2017            [3 × 4] #>  4 Zch_Stampfenbachstrasse µg/m3                         2017           [18 × 4] #>  5 Zch_Stampfenbachstrasse hPa                           2017            [3 × 4] #>  6 Zch_Stampfenbachstrasse 1/cm3                         2017            [1 × 4] #>  7 Zch_Stampfenbachstrasse min                           2017            [1 × 4] #>  8 Zch_Stampfenbachstrasse W/m2                          2017            [2 × 4] #>  9 Zch_Stampfenbachstrasse °C                            2017            [4 × 4] #> 10 Zch_Stampfenbachstrasse m/s                           2017            [2 × 4] #> 11 Zch_Stampfenbachstrasse ppb                           2017            [3 × 4]  # autonaming works fine with strings and symbols, but for expressions # it probably a good idea to provide a name: groupby(data, grp(site, year = lubridate::year(starttime))) #> # A tibble: 1 × 3 #>   site                     year               data #>   <fct>                   <dbl> <list<tibble[,5]>> #> 1 Zch_Stampfenbachstrasse  2017           [63 × 5]"},{"path":"/reference/midpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"returns class midpoint-values for [x-y)-style factor level — midpoints","title":"returns class midpoint-values for [x-y)-style factor level — midpoints","text":"returns class midpoint-values [x-y)-style factor level","code":""},{"path":"/reference/midpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns class midpoint-values for [x-y)-style factor level — midpoints","text":"","code":"midpoints(x)"},{"path":"/reference/midpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns class midpoint-values for [x-y)-style factor level — midpoints","text":"x [x-y)-style factor levels cutting function","code":""},{"path":"/reference/pad_to_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Pads data to complete year — pad_to_year","title":"Pads data to complete year — pad_to_year","text":"Generic padding function. Generates sequence lubridate::floor(start_date, \"year\") lubridate::ceil(end_date, \"year\"). last point excluded end_date != max(data[[date_col]]). hood heavy lifting done tidyr::complete().","code":""},{"path":"/reference/pad_to_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pads data to complete year — pad_to_year","text":"","code":"pad_to_year(   data,   date_col,   interval,   fill = list(),   start_date = NULL,   end_date = NULL )"},{"path":"/reference/pad_to_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pads data to complete year — pad_to_year","text":"data input data date_col column containing date information, every date unique interval interval two dates fill named list variable supplies single value use instead NA missing combinations. start_date optional start_date instead min(data[[date_col]]) end_date optional start_date instead max(data[[date_col]])","code":""},{"path":"/reference/pad_to_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pads data to complete year — pad_to_year","text":"padded data","code":""},{"path":"/reference/pad_to_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pads data to complete year — pad_to_year","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data)  # last data point is at 2013-01-31 23:30:00 tail(data) #> # A tibble: 6 × 16 #>   date                site          CO    Hr    NO   NO2   NOx    O3     p  PM10 #>   <dttm>              <fct>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 2013-01-31 21:00:00 Zch_Stamp… 0.191  67.3 0.675  7.70  4.57  71.0  970.  7.21 #> 2 2013-01-31 21:30:00 Zch_Stamp… 0.195  64.9 0.359  7.72  4.33  69.7  970.  4.89 #> 3 2013-01-31 22:00:00 Zch_Stamp… 0.191  65.1 0.424  6.84  3.92  69.0  970.  6.71 #> 4 2013-01-31 22:30:00 Zch_Stamp… 0.184  67.3 0.353  5.38  3.09  70.5  970.  5.19 #> 5 2013-01-31 23:00:00 Zch_Stamp… 0.186  67.3 0.634  5.87  3.58  70.2  969.  5.79 #> 6 2013-01-31 23:30:00 Zch_Stamp… 0.189  68.7 0.435  6.76  3.88  67.6  969.  7.92 #> # ℹ 6 more variables: RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, T <dbl>, #> #   wd <dbl>, ws <dbl>  # the site column get filled with NA, this could lead to problems tail(pad_to_year(data, date, \"30 min\")) #> # A tibble: 6 × 16 #>   date                site     CO    Hr    NO   NO2   NOx    O3     p  PM10 #>   <dttm>              <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> 2 2013-12-31 21:30:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> 3 2013-12-31 22:00:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> 4 2013-12-31 22:30:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> 5 2013-12-31 23:00:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> 6 2013-12-31 23:30:00 NA       NA    NA    NA    NA    NA    NA    NA    NA #> # ℹ 6 more variables: RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, T <dbl>, #> #   wd <dbl>, ws <dbl>  # better to provide a fill value, for more complex cases use pad_to_year_fill() tail(pad_to_year(data, date, \"30 min\", fill = list(site = \"Zch_Stampfenbachstrasse\"))) #> # A tibble: 6 × 16 #>   date                site          CO    Hr    NO   NO2   NOx    O3     p  PM10 #>   <dttm>              <fct>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 2 2013-12-31 21:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 3 2013-12-31 22:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 4 2013-12-31 22:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 5 2013-12-31 23:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 6 2013-12-31 23:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> # ℹ 6 more variables: RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, T <dbl>, #> #   wd <dbl>, ws <dbl>"},{"path":"/reference/pad_to_year_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Pads data to complete year and fill up specific columns — pad_to_year_fill","title":"Pads data to complete year and fill up specific columns — pad_to_year_fill","text":"function pad data complete years. fill mechanism : find min- max time group data columns provided ... factor/character columns dplyr::group_nest() pass nested data group pad_to_year() min- max time tidyr::unnest()","code":""},{"path":"/reference/pad_to_year_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pads data to complete year and fill up specific columns — pad_to_year_fill","text":"","code":"pad_to_year_fill(data, date_col, interval, ...)"},{"path":"/reference/pad_to_year_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pads data to complete year and fill up specific columns — pad_to_year_fill","text":"data input data date_col column containing time information interval interval two dates. See seq.POSIXt() valid values ... columns fill ","code":""},{"path":"/reference/pad_to_year_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pads data to complete year and fill up specific columns — pad_to_year_fill","text":"padded data","code":""},{"path":"/reference/pad_to_year_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pads data to complete year and fill up specific columns — pad_to_year_fill","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_min30_2013_Jan.csv\") data <- rOstluft::read_airmo_csv(fn)  tail(data) #> # A tibble: 6 × 6 #>   starttime           site                    parameter interval unit  value #>   <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #> 1 2013-01-31 21:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s    5.96 #> 2 2013-01-31 21:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s    6.00 #> 3 2013-01-31 22:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s    6.75 #> 4 2013-01-31 22:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s    6.59 #> 5 2013-01-31 23:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s    5.28 #> 6 2013-01-31 23:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s    3.68  # fills up all factor and character columns pad_to_year_fill(data, starttime, \"30 min\") %>% tail() #> # A tibble: 6 × 6 #>   starttime           site                    parameter interval unit  value #>   <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #> 1 2013-12-31 21:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA #> 2 2013-12-31 21:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA #> 3 2013-12-31 22:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA #> 4 2013-12-31 22:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA #> 5 2013-12-31 23:00:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA #> 6 2013-12-31 23:30:00 Zch_Stampfenbachstrasse WVv       min30    m/s      NA  # or only the specific and the rest with na pad_to_year_fill(data, starttime, \"30 min\", site) %>% tail() #> # A tibble: 6 × 6 #>   starttime           site                    parameter interval unit  value #>   <dttm>              <fct>                   <fct>     <fct>    <fct> <dbl> #> 1 2013-12-31 21:00:00 Zch_Stampfenbachstrasse NA        NA       NA       NA #> 2 2013-12-31 21:30:00 Zch_Stampfenbachstrasse NA        NA       NA       NA #> 3 2013-12-31 22:00:00 Zch_Stampfenbachstrasse NA        NA       NA       NA #> 4 2013-12-31 22:30:00 Zch_Stampfenbachstrasse NA        NA       NA       NA #> 5 2013-12-31 23:00:00 Zch_Stampfenbachstrasse NA        NA       NA       NA #> 6 2013-12-31 23:30:00 Zch_Stampfenbachstrasse NA        NA       NA       NA  # data in wide format data <- rOstluft::rolf_to_openair(data) pad_to_year_fill(data, date, \"30 min\") %>% tail() #> # A tibble: 6 × 16 #>   date                site          CO    Hr    NO   NO2   NOx    O3     p  PM10 #>   <dttm>              <fct>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 2013-12-31 21:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 2 2013-12-31 21:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 3 2013-12-31 22:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 4 2013-12-31 22:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 5 2013-12-31 23:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> 6 2013-12-31 23:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA    NA #> # ℹ 6 more variables: RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, T <dbl>, #> #   wd <dbl>, ws <dbl>  # but be careful not to include cutting factors data <- openair::cutData(data, \"month\") %>%   dplyr::select(month, dplyr::everything())  # fills up month and would multiply the data by the numbers of months pad_to_year_fill(data, date, \"30 min\") %>% tail() #> # A tibble: 6 × 17 #>   month  date                site         CO    Hr    NO   NO2   NOx    O3     p #>   <ord>  <dttm>              <fct>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Januar 2013-12-31 21:00:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> 2 Januar 2013-12-31 21:30:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> 3 Januar 2013-12-31 22:00:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> 4 Januar 2013-12-31 22:30:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> 5 Januar 2013-12-31 23:00:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> 6 Januar 2013-12-31 23:30:00 Zch_Stam…    NA    NA    NA    NA    NA    NA    NA #> # ℹ 7 more variables: PM10 <dbl>, RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, #> #   T <dbl>, wd <dbl>, ws <dbl>  # only fills up the site column pad_to_year_fill(data, date, \"30 min\", site) %>% tail() #> # A tibble: 6 × 17 #>   month date                site          CO    Hr    NO   NO2   NOx    O3     p #>   <ord> <dttm>              <fct>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 NA    2013-12-31 21:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> 2 NA    2013-12-31 21:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> 3 NA    2013-12-31 22:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> 4 NA    2013-12-31 22:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> 5 NA    2013-12-31 23:00:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> 6 NA    2013-12-31 23:30:00 Zch_Stamp…    NA    NA    NA    NA    NA    NA    NA #> # ℹ 7 more variables: PM10 <dbl>, RainDur <dbl>, SO2 <dbl>, StrGlo <dbl>, #> #   T <dbl>, wd <dbl>, ws <dbl>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/recode_last_class_label.html","id":null,"dir":"Reference","previous_headings":"","what":"recode highest [x-y)-style factor level to yield '>y' — recode_last_class_label","title":"recode highest [x-y)-style factor level to yield '>y' — recode_last_class_label","text":"recode highest [x-y)-style factor level yield '>y'","code":""},{"path":"/reference/recode_last_class_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recode highest [x-y)-style factor level to yield '>y' — recode_last_class_label","text":"","code":"recode_last_class_label(factor_var)"},{"path":"/reference/recode_last_class_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recode highest [x-y)-style factor level to yield '>y' — recode_last_class_label","text":"factor_var factor cutting function recode","code":""},{"path":"/reference/rOstluft-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"All ggproto Objects — CoordCartPolar","title":"All ggproto Objects — CoordCartPolar","text":"ggproto Objects","code":""},{"path":"/reference/rOstluft-ggproto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All ggproto Objects — CoordCartPolar","text":"","code":"CoordCartPolar  CoordPolar2  GeomBarWind  GeomPolarRaster  CalMonthBorder  StatFilter  StatSummaryWind  StatSummaryWind2d"},{"path":"/reference/rOstluft-ggproto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All ggproto Objects — CoordCartPolar","text":"object class CoordCartPolar (inherits CoordCartesian, Coord, ggproto, gg) length 11. object class CoordPolar2 (inherits CoordPolar, Coord, ggproto, gg) length 2. object class GeomBarWind (inherits GeomRect, Geom, ggproto, gg) length 5. object class GeomPolarRaster (inherits Geom, ggproto, gg) length 5. object class CalMonthBorder (inherits Stat, ggproto, gg) length 3. object class StatFilter (inherits Stat, ggproto, gg) length 3. object class StatSummaryWind (inherits Stat, ggproto, gg) length 3. object class StatSummaryWind2d (inherits Stat, ggproto, gg) length 3.","code":""},{"path":[]},{"path":"/reference/rOstluft.plot-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"Defunct Functions Package rOstluft.plot","code":""},{"path":"/reference/rOstluft.plot-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"","code":"get_stamen_map(bbox, width = 640, zoom = \"auto\", color = \"bw\", ...)"},{"path":"/reference/rOstluft.plot-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"bbox list items left, bottom, right top WSG84 coordinates. Additional width meters zoom = \"auto\". Use bbox_lv95() create compatible bounding box list width resulting map pixels. zoom zoomlevel 0 18 \"auto\" color color black--white. Changed default \"bw\" ... forwarded","code":""},{"path":"/reference/rOstluft.plot-defunct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":"/reference/rOstluft.plot-defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"get_stamen_map() replaced get_stadia_map() functions get_googlemap() get_stamen_map() tries harmonize calls ggmap(). objective get interchangeable functions sensible defaults. example automatic calculation zoom. function bbox_lv95() generates bbox object compatible functions.","code":""},{"path":"/reference/rOstluft.plot-defunct.html","id":"attribution","dir":"Reference","previous_headings":"","what":"Attribution","title":"Defunct Functions in Package rOstluft.plot — rOstluft.plot-defunct","text":"Toner Terrain: Map tiles Stamen Design, CC 3.0. Data OpenStreetMap, ODbL. Watercolor: Map tiles Stamen Design, CC 3.0. Data OpenStreetMap, CC SA.","code":""},{"path":"/reference/rOstluft.plot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rOstluft.plot: Ploting air quality data — rOstluft.plot-package","title":"rOstluft.plot: Ploting air quality data — rOstluft.plot-package","text":"package provides functions quickly display data diagrams.","code":""},{"path":[]},{"path":"/reference/rOstluft.plot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rOstluft.plot: Ploting air quality data — rOstluft.plot-package","text":"Maintainer: Thomas von Allmen thomas.vonallmen@zuerich.ch Authors: Jörg Sintermann contributors: Ostluft [copyright holder]","code":""},{"path":"/reference/scale_viridis_squished.html","id":null,"dir":"Reference","previous_headings":"","what":"squish outliers or extreme values in scales — scale_fill_viridis_squished","title":"squish outliers or extreme values in scales — scale_fill_viridis_squished","text":"scale applies limits determination color. underlying data squish. values outside limit simple colored .","code":""},{"path":"/reference/scale_viridis_squished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"squish outliers or extreme values in scales — scale_fill_viridis_squished","text":"","code":"scale_fill_viridis_squished(limits, breaks, labels = waiver(), ...)  scale_color_viridis_squished(limits, breaks, labels = waiver(), ...)  scale_fill_gradientn_squished(limits, breaks, labels = waiver(), ...)  scale_color_gradientn_squished(limits, breaks, labels = waiver(), ...)"},{"path":"/reference/scale_viridis_squished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"squish outliers or extreme values in scales — scale_fill_viridis_squished","text":"limits scale breaks numeric vector positions breaks labels One : NULL labels waiver() default labels computed transformation object. Adds leading \">\" last element character vector giving labels (must length breaks) function takes breaks input returns labels output. Adds leading \">\" last element ... arguments passed ggplot2::scale_colour_viridis_c() scale_fill_viridis_c()","code":""},{"path":"/reference/scale_viridis_squished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"squish outliers or extreme values in scales — scale_fill_viridis_squished","text":"scale","code":""},{"path":"/reference/scale_viridis_squished.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"squish outliers or extreme values in scales — scale_fill_viridis_squished","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  df <-   rOstluft::read_airmo_csv(fn) %>%   dplyr::filter(starttime < lubridate::ymd(20140101)) %>%   rOstluft::rolf_to_openair()  # data with outliers / extreme values ggyearday(df, time = \"date\", z = \"PM10\") #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # simple squished scale fill_scale <- scale_fill_viridis_squished(   limits = c(0, 75),   breaks = c(0, 25, 50, 75),   direction = -1,   na.value = NA,   option = \"A\" ) ggyearday(df, time = \"date\", z = \"PM10\", fill_scale = fill_scale) +   facet_wrap(vars(year), scales = \"free_x\", ncol = 1) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # add unit to scale (or any other label formating function) fill_scale <- scale_fill_viridis_squished(   limits = c(0, 75),   breaks = c(0, 25, 50, 75),   labels = scales::unit_format(unit = \"\\u00b5g/m3\"),   direction = -1,   na.value = NA,   option = \"A\" ) ggyearday(df, time = \"date\", z = \"PM10\", fill_scale = fill_scale) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # custom labels for breaks fill_scale <- scale_fill_viridis_squished(   limits = c(0, 75),   breaks = c(0, 25, 50, 75),   labels = c(\"A\", \"B\", \"C\", \"D\"),   direction = -1,   na.value = NA,   option = \"A\" ) ggyearday(df, time = \"date\", z = \"PM10\", fill_scale = fill_scale) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # No labels for breaks fill_scale <- scale_fill_viridis_squished(   limits = c(0, 75),   breaks = c(0, 25, 50, 75),   labels = NULL,   direction = -1,   na.value = NA,   option = \"A\" ) ggyearday(df, time = \"date\", z = \"PM10\", fill_scale = fill_scale) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # simple squished jet gradientn scale fill_scale <- scale_fill_gradientn_squished(   limits = c(0, 75),   breaks = c(0, 25, 50, 75),   colors = matlab::jet.colors(20),   na.value = NA ) ggyearday(df, time = \"date\", z = \"PM10\", fill_scale = fill_scale) #> Warning: Removed 2227 rows containing missing values or values outside the scale range #> (`geom_raster()`)."},{"path":"/reference/squished_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"generates labels for squished scales — squished_labels","title":"generates labels for squished scales — squished_labels","text":"generates labels squished scales","code":""},{"path":"/reference/squished_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generates labels for squished scales — squished_labels","text":"","code":"squished_labels(labels)"},{"path":"/reference/squished_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generates labels for squished scales — squished_labels","text":"labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) function takes breaks input returns labels output Additional NULL last element formated leading \">\"","code":""},{"path":"/reference/squished_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generates labels for squished scales — squished_labels","text":"function, labels scales","code":""},{"path":"/reference/stat_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering data — stat_filter","title":"Filtering data — stat_filter","text":"keeps values aesthetic filter evaluates TRUE. Useful showing subset data highlight values, without filtering data outside. Inspired metR::stat_subset().","code":""},{"path":"/reference/stat_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtering data — stat_filter","text":"","code":"stat_filter(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   show.legend = FALSE,   inherit.aes = TRUE,   na.rm = TRUE,   ... )"},{"path":"/reference/stat_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filtering data — stat_filter","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). na.rm remove na values befor applying filter ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/stat_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filtering data — stat_filter","text":"ggplot2 layer","code":""},{"path":"/reference/stat_filter.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Filtering data — stat_filter","text":"filter: expression evalueted data","code":""},{"path":"/reference/stat_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtering data — stat_filter","text":"","code":"require(ggplot2) p <- ggplot(mtcars, aes(wt, mpg)) + geom_point() p + stat_filter(aes(filter = mpg > 30), shape = 21, size = 4, stroke = 2, color = \"red\", fill = NA)   p + geom_text(aes(filter = mpg > 32, label = rownames(mtcars)),                 stat = \"filter\", nudge_y = 0.75)   data <- tidyr::crossing(y = 1:dim(volcano)[2], x = 1:dim(volcano)[1]) data$value <- array(volcano) ggplot(data, aes(x = x, y = y)) +   geom_contour(aes(z = value)) +   stat_filter(aes(filter = value >= 150 & value <= 160), shape = 3, color = \"red\")"},{"path":"/reference/stat_summary_wind_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise z values over binned wind data. — stat_summary_wind_2d","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"Binning done StatWind, input data tostat_summary_wind() original unbinned data. Depending groups argument, binning either done 2-dimensional cartesian u v wind vectors (calculated input data; , stat_summary_wind() yields results similar openair::polarPlot()) 1-dimensional wind direction wind velocity bins, respectively.","code":""},{"path":"/reference/stat_summary_wind_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"","code":"stat_summary_wind_2d(   data = NULL,   mapping = NULL,   geom = \"raster\",   position = \"identity\",   ...,   fun = \"mean\",   fun.args = list(),   nmin = 1,   ws_max = NA,   bins = 10^2,   smooth = TRUE,   k = 100,   extrapolate = TRUE,   dist = 0.1,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/stat_summary_wind_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"data data displayed layer. Requires input data including least three columns carrying information regarding: * wind direction (°) * wind velocity * z-values (e.g. air pollutant concentration) mapping ggplot2 mapping, e.g. aes(wd = wd, ws = ws, z = NOx); requires wd, ws, z geom geometric object use display data (case: raster). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed ggplot2::layer() params = list(...). fun function list functions summary. fun.args list extra arguments pass fun. nmin numeric, minimum number values fun, n < nmin: NA returned ws_max numeric NA, maximum wind velocity binning: ws_max, z set NA bins numeric, number bins range values !groups %% c(\"u\", \"v\") smooth TRUE/FALSE, applies groups = c(\"u\", \"v\"); smoothing summary results performed using fit_gam_surface()? k numeric, applies smooth = TRUE; degree smoothing smooth term fit_gam_surface() extrapolate TRUE/FALSE, applies smooth = TRUE; fit_gam_surface() returns extrapolated (predicted) values u, v coordinates otherwise NA summarised z extrapolate = TRUE, values returned (certain degree depending value dist) dist numeric, fraction 1, applies smooth = TRUE extrapolate = TRUE; maximum distance next coordinate-pair result fit_gam_surface(z) returned na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/stat_summary_wind_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"ggplot2 layer","code":""},{"path":"/reference/stat_summary_wind_2d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"wd: wind direction degrees ws: wind velocity z: z values summarised","code":""},{"path":"/reference/stat_summary_wind_2d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"groups = c(\"u\", \"v\"): tibble returned, binned u v, variables: wd: wind direction corresponding midpoint value u v ws: wind velocity corresponding midpoint value u v wd_class: new bins wd considering binwidth ws_class: new bins ws considering binwidth ws_max u: bins u (input wd ws) v: bins v (input wd ws) z: result fun(z, ...) groups = NULL: groups = \"wd\". case, bins calculated wind direction; tibble including wd_class summarised z returned groups can strings varibables data; fun applied ; tibble including groups summarised z returned","code":""},{"path":"/reference/stat_summary_wind_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise z values over binned wind data. — stat_summary_wind_2d","text":"","code":"library(ggplot2)  fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  df <- rOstluft::read_airmo_csv(fn) %>%   rOstluft::rolf_to_openair()  ggplot(df, aes(x = stat(u), y = stat(v), fill = stat(z))) +   stat_summary_wind_2d(mapping = aes(wd = wd, ws = ws, z = NO2), bins = 50^2) +   coord_cartpolar() +   scale_fill_viridis_c(na.value = NA) #> Warning: Removed 767 rows containing non-finite outside the scale range #> (`stat_summary_wind2d()`). #> Warning: Removed 991 rows containing missing values or values outside the scale range #> (`geom_raster()`)."},{"path":"/reference/summary_periodic.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"Input data rOstluft::format_rolf() data.","code":""},{"path":"/reference/summary_periodic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"","code":"summary_periodic(   data,   y = \"value\",   groupings = grp(\"starttime_of_day\"),   fun = list(\"mean\", \"sd\", \"median\", \"mad\", \"percentile05\", \"percentile25\",     \"percentile75\", \"percentile95\"),   fun.args = list(na.rm = TRUE),   nmin = 3,   coords = c(lat = 47.36667, lon = 8.55) )"},{"path":"/reference/summary_periodic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"data data.frame tibble containing data y character string specifying taget variable summarised, usually \"value\". groupings additional groupings. Use helper grp() create; groupings must  possible outcomes cut_timeseries_periodic(). fun function list functions summary, can named (outut stat named function's name); Strings matching regular expression /^percentile([0-9]){1,2}$/converted respective function. \"percentile95\" => function(x, ...) quantile(x, 95 / 100, ...) fun.args list extra arguments passed fun. nmin numeric, minimum number values fun, n < nmin: NA returned coords named vector location  WGS84 coordinates daylight factoring. suncalc::getSunlightTimes() used calculate sunrise, sunset times. Default: c(lat = 47.36667, lon = 8.55) => Zuerich, Switzerland","code":""},{"path":"/reference/summary_periodic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"tibble summarised data","code":""},{"path":"/reference/summary_periodic.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"determined cut_timeseries_periodic() combination grouping names columns stay data. factor columns according groups specified grouping factor column stat containing name summarize function level column value result summarize function n count occurrences corresponding bin freq frequency corresponding bin","code":""},{"path":"/reference/summary_periodic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a rOstluft::format_rolf() dataset over periodic (diurnal, weekday, etc) factors implicitly created by cut_timeseries_periodic() using various stat functions. — summary_periodic","text":"","code":"fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\")  data <-   rOstluft::read_airmo_csv(fn) %>%   rOstluft::pluck_parameter(\"NOx\", \"O3\", \"PM10\") %>%   rOstluft::resample(new_interval = \"h1\")  fun <- list(middle = \"mean\", middle2 = \"median\", ymin = \"percentile05\",            lower = \"percentile25\", upper = \"percentile75\", ymax = \"percentile95\")  data_summarized <- summary_periodic(data, fun = fun) data_summarized #> # A tibble: 432 × 9 #>    starttime_of_day site        parameter interval unit      n  freq stat  value #>    <ord>            <fct>       <fct>     <fct>    <fct> <int> <dbl> <fct> <dbl> #>  1 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 midd… 24.0  #>  2 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 midd… 17.1  #>  3 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 ymin   4.07 #>  4 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 lower  9.05 #>  5 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 upper 30.6  #>  6 00:00            Zch_Stampf… NOx       h1       ppb    1826 0.333 ymax  68.3  #>  7 00:00            Zch_Stampf… O3        h1       µg/m3  1826 0.333 midd… 38.0  #>  8 00:00            Zch_Stampf… O3        h1       µg/m3  1826 0.333 midd… 38.6  #>  9 00:00            Zch_Stampf… O3        h1       µg/m3  1826 0.333 ymin   1.29 #> 10 00:00            Zch_Stampf… O3        h1       µg/m3  1826 0.333 lower 12.5  #> # ℹ 422 more rows"},{"path":"/reference/summary_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise z values over binned wind data. — summary_wind","title":"Summarise z values over binned wind data. — summary_wind","text":"Input data original unbinned data. 1-dimensional binning calculating summary statistics wind direction /wind velocity bins, respectively. NA values z ws, wd (cutting) silently removed applying functions","code":""},{"path":"/reference/summary_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise z values over binned wind data. — summary_wind","text":"","code":"summary_wind(   data,   ws,   wd,   z,   groupings = grp(),   fun = \"mean\",   fun.args = list(),   nmin = 3,   wd_cutfun = cut_wd.fun(binwidth = 45),   ws_cutfun = cut_ws.fun(binwidth = 1) )"},{"path":"/reference/summary_wind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise z values over binned wind data. — summary_wind","text":"data data.frame tibble containing data (wide format) ws NULL symbol giving wind velocity parameter name (wind velocity preferably m/s) wd symbol giving wind direction parameter name  degrees z symbol giving parameter name summarised groupings additional groupings. Use helper grp() create fun function list functions summary. fun.args list extra arguments passed fun. nmin numeric, minimum number values fun, n < nmin: NA returned wd_cutfun function, cut function wind direction (create bins). See cut_wd.fun() options. ws_cutfun function, cut function wind speed. See cut_ws.fun() examples","code":""},{"path":"/reference/summary_wind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise z values over binned wind data. — summary_wind","text":"tibble summarised data","code":""},{"path":"/reference/summary_wind.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Summarise z values over binned wind data. — summary_wind","text":"names columns stay data (arguments \"ws\", \"wd\" \"z\"). binned column ws .null(ws) == FALSE binned column wd factor column stat containing name summarize function level column z result summarize function n count occurrences corresponding bin freq frequency corresponding bin","code":""},{"path":"/reference/summary_wind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise z values over binned wind data. — summary_wind","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data) data <- dplyr::mutate(data, year = lubridate::year(date))  summary_wind(data, \"ws\", \"wd\", \"NO2\") #> # A tibble: 57 × 6 #>    ws    wd        n   freq stat    NO2 #>    <ord> <ord> <int>  <dbl> <fct> <dbl> #>  1 [0,1] N      3230 0.0372 mean   43.6 #>  2 [0,1] NO     3894 0.0448 mean   44.6 #>  3 [0,1] O      1394 0.0160 mean   44.0 #>  4 [0,1] SO     1342 0.0155 mean   43.9 #>  5 [0,1] S      2965 0.0341 mean   47.6 #>  6 [0,1] SW     3357 0.0386 mean   45.0 #>  7 [0,1] W      4518 0.0520 mean   43.7 #>  8 [0,1] NW     3497 0.0403 mean   39.8 #>  9 (1,2] N      5764 0.0664 mean   39.4 #> 10 (1,2] NO    10172 0.117  mean   41.3 #> # ℹ 47 more rows  # multiple stats: Pass function, by name, reference, as function or one sided formula q95 <- function(x) stats::quantile(x, probs = 0.95)  funs <- list(   \"mean\",   \"median\",   \"q95_1\" = q95,   \"q95_2\" = function(x) stats::quantile(x, probs = 0.95),   \"q95_3\" = ~ stats::quantile(., probs = 0.95) )  res <- summary_wind(data, \"ws\", \"wd\", \"NO2\", fun = funs) res #> # A tibble: 285 × 6 #>    ws    wd        n   freq stat     NO2 #>    <ord> <ord> <int>  <dbl> <fct>  <dbl> #>  1 [0,1] N      3230 0.0372 mean    43.6 #>  2 [0,1] N      3230 0.0372 median  41.4 #>  3 [0,1] N      3230 0.0372 q95_1   79.8 #>  4 [0,1] N      3230 0.0372 q95_2   79.8 #>  5 [0,1] N      3230 0.0372 q95_3   79.8 #>  6 [0,1] NO     3894 0.0448 mean    44.6 #>  7 [0,1] NO     3894 0.0448 median  42.5 #>  8 [0,1] NO     3894 0.0448 q95_1   81.6 #>  9 [0,1] NO     3894 0.0448 q95_2   81.6 #> 10 [0,1] NO     3894 0.0448 q95_3   81.6 #> # ℹ 275 more rows  # and q95, q95_1, q95_2, q95_3 alle have the same value tidyr::spread(res, \"stat\", \"NO2\") %>%   dplyr::select(q95_1, q95_2, q95_3) #> # A tibble: 57 × 3 #>    q95_1 q95_2 q95_3 #>    <dbl> <dbl> <dbl> #>  1  79.8  79.8  79.8 #>  2  81.6  81.6  81.6 #>  3  80.5  80.5  80.5 #>  4  84.0  84.0  84.0 #>  5  91.3  91.3  91.3 #>  6  83.0  83.0  83.0 #>  7  78.7  78.7  78.7 #>  8  76.2  76.2  76.2 #>  9  74.2  74.2  74.2 #> 10  77.1  77.1  77.1 #> # ℹ 47 more rows  # is for some reason fun.args used with multiple functions, use ... to catch # superfluous arguments: funs <- list(   \"q95\" = function(x, ...) stats::quantile(x, probs = 0.95),   \"mean\" ) summary_wind(data, \"ws\", \"wd\", \"NO2\", fun = funs, fun.args = list(na.rm = TRUE)) #> # A tibble: 114 × 6 #>    ws    wd        n   freq stat    NO2 #>    <ord> <ord> <int>  <dbl> <fct> <dbl> #>  1 [0,1] N      3230 0.0372 q95    79.8 #>  2 [0,1] N      3230 0.0372 mean   43.6 #>  3 [0,1] NO     3894 0.0448 q95    81.6 #>  4 [0,1] NO     3894 0.0448 mean   44.6 #>  5 [0,1] O      1394 0.0160 q95    80.5 #>  6 [0,1] O      1394 0.0160 mean   44.0 #>  7 [0,1] SO     1342 0.0155 q95    84.0 #>  8 [0,1] SO     1342 0.0155 mean   43.9 #>  9 [0,1] S      2965 0.0341 q95    91.3 #> 10 [0,1] S      2965 0.0341 mean   47.6 #> # ℹ 104 more rows   # more wd classes, less ws classes and squish ws summary_wind(data, \"ws\", \"wd\", \"NO\",              wd_cutfun = cut_wd.fun(binwidth = 22.5),              ws_cutfun = cut_ws.fun(binwidth = 2, ws_max = 6)) #> # A tibble: 54 × 6 #>    ws    wd        n    freq stat     NO #>    <ord> <ord> <int>   <dbl> <fct> <dbl> #>  1 [0,2] N      4225 0.0486  mean   27.0 #>  2 [0,2] NNO    8338 0.0960  mean   34.5 #>  3 [0,2] NO     7623 0.0878  mean   28.4 #>  4 [0,2] ONO    2525 0.0291  mean   22.8 #>  5 [0,2] O      1087 0.0125  mean   21.6 #>  6 [0,2] OSO     743 0.00855 mean   23.0 #>  7 [0,2] SO     1205 0.0139  mean   19.1 #>  8 [0,2] SSO    3498 0.0403  mean   18.5 #>  9 [0,2] S      4916 0.0566  mean   22.5 #> 10 [0,2] SSW    3223 0.0371  mean   23.2 #> # ℹ 44 more rows  # no ws class summary_wind(data, NULL, \"wd\", \"NO\") #> # A tibble: 8 × 5 #>   wd        n   freq stat     NO #>   <ord> <int>  <dbl> <fct> <dbl> #> 1 N     11292 0.130  mean   27.8 #> 2 NO    22480 0.259  mean   25.9 #> 3 O      2564 0.0295 mean   21.1 #> 4 SO     3422 0.0394 mean   16.7 #> 5 S     13007 0.150  mean   18.3 #> 6 SW    12088 0.139  mean   13.5 #> 7 W     13197 0.152  mean   14.8 #> 8 NW     8809 0.101  mean   15.0  # additional grouping with strings, symbols or named expressions summary_wind(data, ws, wd, NO2, group = grp(\"site\", year, wday = lubridate::wday(date))) #> # A tibble: 1,284 × 9 #>    ws    wd    site                     year  wday     n   freq stat    NO2 #>    <ord> <ord> <fct>                   <dbl> <dbl> <int>  <dbl> <fct> <dbl> #>  1 [0,1] N     Zch_Stampfenbachstrasse  2010     1    76 0.0304 mean   37.1 #>  2 [0,1] N     Zch_Stampfenbachstrasse  2010     2    86 0.0350 mean   47.2 #>  3 [0,1] N     Zch_Stampfenbachstrasse  2010     3    98 0.0398 mean   48.4 #>  4 [0,1] N     Zch_Stampfenbachstrasse  2010     4   102 0.0414 mean   49.5 #>  5 [0,1] N     Zch_Stampfenbachstrasse  2010     5    82 0.0332 mean   46.3 #>  6 [0,1] N     Zch_Stampfenbachstrasse  2010     6    85 0.0343 mean   49.9 #>  7 [0,1] N     Zch_Stampfenbachstrasse  2010     7    89 0.0357 mean   40.8 #>  8 [0,1] N     Zch_Stampfenbachstrasse  2011     1    97 0.0396 mean   30.9 #>  9 [0,1] N     Zch_Stampfenbachstrasse  2011     2    88 0.0357 mean   44.6 #> 10 [0,1] N     Zch_Stampfenbachstrasse  2011     3    88 0.0356 mean   46.9 #> # ℹ 1,274 more rows  # how often comes which concentration from one direction summary_wind(data, NULL, wd, NO2,              group = grp(NO2_class = ggplot2::cut_number(NO2, 5))) #> # A tibble: 40 × 6 #>    wd    NO2_class        n   freq stat    NO2 #>    <ord> <fct>        <int>  <dbl> <fct> <dbl> #>  1 N     [0.066,15.9]   990 0.0570 mean   12.3 #>  2 N     (15.9,25.6]   1992 0.115  mean   20.9 #>  3 N     (25.6,36.5]   2551 0.147  mean   31.1 #>  4 N     (36.5,51.2]   2751 0.158  mean   43.4 #>  5 N     (51.2,148]    3008 0.173  mean   65.8 #>  6 NO    [0.066,15.9]  2177 0.125  mean   12.2 #>  7 NO    (15.9,25.6]   4142 0.238  mean   21.0 #>  8 NO    (25.6,36.5]   5510 0.317  mean   31.0 #>  9 NO    (36.5,51.2]   5451 0.314  mean   43.3 #> 10 NO    (51.2,148]    5200 0.299  mean   66.4 #> # ℹ 30 more rows  # the same but we use ws as pollutant summary_wind(data, NO2, wd, NO2, ws_cutfun = cut_number.fun(5)) #> # A tibble: 40 × 6 #>    NO2          wd        n    freq stat  NO2.stat #>    <fct>        <ord> <int>   <dbl> <fct>    <dbl> #>  1 [0.066,15.9] N       991 0.0114  mean     12.3  #>  2 [0.066,15.9] NO     2177 0.0251  mean     12.2  #>  3 [0.066,15.9] O       226 0.00260 mean     11.7  #>  4 [0.066,15.9] SO      671 0.00773 mean     11.1  #>  5 [0.066,15.9] S      2171 0.0250  mean     11.1  #>  6 [0.066,15.9] SW     4104 0.0472  mean      9.80 #>  7 [0.066,15.9] W      4670 0.0538  mean     10.1  #>  8 [0.066,15.9] NW     2367 0.0273  mean     11.0  #>  9 (15.9,25.6]  N      1991 0.0229  mean     20.9  #> 10 (15.9,25.6]  NO     4145 0.0477  mean     21.0  #> # ℹ 30 more rows  # some plots using the summarized data  # a radar plot funs <- list(   \"mean\",   \"median\",   \"q95\" = ~ stats::quantile(., probs = 0.95) )  data_summarized <- summary_wind(data, ws, wd, NOx, fun = funs,   ws_cutfun = cut_number.fun(1) )  ggplot(data_summarized, aes(x = wd, y = NOx, color = stat, group = stat)) +   geom_polygon(size = 1, fill = NA) +   coord_radar(start = - 22.5 / 180 * pi ) +   scale_color_viridis_d(end = 0.8) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0, 0, 0)) +   facet_wrap(vars(stat))    # a wind rose data_summarized <- summary_wind(data, ws, wd, ws,   ws_cutfun = cut_ws.fun(ws_max = 4, reverse = TRUE) )  ggplot(data_summarized, aes(x = wd, y = freq, fill = ws)) +   geom_bar(stat = \"identity\") +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_y_continuous(     limits = c(0, NA),     expand = c(0,0, 0, 0),     labels = scales::percent   ) +   scale_fill_viridis_d()    # a pollution rose, use the pollutant as ws data_summarized <- summary_wind(data, NOx, wd, NOx,   ws_cutfun = cut_number.fun(5) )  # we can plot with the group as fill ggplot(data_summarized, aes(x = wd, y = freq, fill = forcats::fct_rev(NOx))) +   geom_bar(stat = \"identity\") +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0, 0, 0)) +   scale_fill_viridis_d(direction = -1, name = \"NOx\")   # or the mean of the group as fill ggplot(data_summarized, aes(x = wd, y = freq, fill = NOx.stat)) +   geom_bar(stat = \"identity\") +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_y_continuous(limits = c(0, NA), expand = c(0,0, 0, 0)) +   scale_fill_viridis_c(name = \"NOx\")"},{"path":"/reference/summary_wind_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"Input data original unbinned data including wind direction wind velocity; binning done 2-dimensional cartesian u v wind vectors","code":""},{"path":"/reference/summary_wind_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"","code":"summary_wind_2d(   data,   ws,   wd,   z,   groupings = grp(),   fun = \"mean\",   fun.args = list(),   nmin = 3,   ws_max = NA,   bins = 10^2,   smooth = TRUE,   k = 100,   extrapolate = TRUE,   dist = 0.1 )"},{"path":"/reference/summary_wind_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"data data.frame tibble containing data (wide format). requires input data including least three columns carrying information regarding: wind direction (°) wind velocity z-values (e.g. air pollutant concentration) ws symbol giving wind velocity parameter name (wind velocity preferably m/s) wd symbol giving wind direction parameter name  degrees z symbol giving parameter name summarised groupings additional groupings. Use helper grp() create fun function list functions summary. fun.args list extra arguments pass fun. nmin numeric, minimum number values fun, n < nmin: NA returned ws_max numeric Inf, maximum wind velocity binning: ws_max, z set NA bins numeric, number bins range values !groups %% c(\"u\", \"v\") smooth TRUE/FALSE, applies groups = c(\"u\", \"v\"); smoothing summary results performed using fit_gam_surface()? k numeric, applies smooth = TRUE; degree smoothing smooth term fit_gam_surface() extrapolate TRUE/FALSE, applies smooth = TRUE; fit_gam_surface() returns extrapolated (predicted) values u, v coordinates otherwise NA summarised z extrapolate = TRUE, values returned (certain degree depending value dist) dist numeric, fraction 1, applies smooth = TRUE extrapolate = TRUE; maximum distance next coordinate-pair result fit_gam_surface(z) returned","code":""},{"path":"/reference/summary_wind_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"tibble summarised data along u v wind vectors","code":""},{"path":"/reference/summary_wind_2d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"tibble returned, binned u v, variables: wd: wind direction corresponding midpoint value u v ws: wind velocity corresponding midpoint value u v u: midpoints bins u (input wd ws) v: midpoints bins v (input wd ws) z: result fun(z, ...)","code":""},{"path":"/reference/summary_wind_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise y values over binned wind data, split into u and v components. — summary_wind_2d","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data)  # summary NO2 summary_wind_2d(data, ws, wd, NOx, smooth = FALSE) #> # A tibble: 100 × 8 #>        u      v stat      n      freq   NOx    wd    ws #>    <dbl>  <dbl> <chr> <int>     <dbl> <dbl> <dbl> <dbl> #>  1 -8.12 -8.12  mean      0 0         NA     45   11.5  #>  2 -8.12 -6.32  mean      0 0         NA     52.1 10.3  #>  3 -8.12 -4.51  mean     12 0.000138   6.08  60.9  9.29 #>  4 -8.12 -2.71  mean     18 0.000207   6.27  71.6  8.56 #>  5 -8.12 -0.903 mean      3 0.0000345  6.82  83.7  8.17 #>  6 -8.12  0.903 mean      0 0         NA     96.3  8.17 #>  7 -8.12  2.71  mean      0 0         NA    108.   8.56 #>  8 -8.12  4.51  mean      0 0         NA    119.   9.29 #>  9 -8.12  6.32  mean      0 0         NA    128.  10.3  #> 10 -8.12  8.12  mean      0 0         NA    135   11.5  #> # ℹ 90 more rows  # multiple stats: Pass function, by name, reference, as function or one sided formula funs <- list(   \"mean\",   \"median\" = function(x) median(x, na.rm = TRUE),   \"q95\" = ~ stats::quantile(., probs = 0.95) )  summary_wind_2d(data, ws, wd, NOx, fun = funs, smooth = FALSE) #> Warning: attributes are not identical across measure variables; they will be dropped #> # A tibble: 300 × 8 #>        u     v stat       n     freq   NOx    wd    ws #>    <dbl> <dbl> <chr>  <int>    <dbl> <dbl> <dbl> <dbl> #>  1 -8.12 -8.12 mean       0 0        NA     45   11.5  #>  2 -8.12 -8.12 median     0 0        NA     45   11.5  #>  3 -8.12 -8.12 q95        0 0        NA     45   11.5  #>  4 -8.12 -6.32 mean       0 0        NA     52.1 10.3  #>  5 -8.12 -6.32 median     0 0        NA     52.1 10.3  #>  6 -8.12 -6.32 q95        0 0        NA     52.1 10.3  #>  7 -8.12 -4.51 mean      12 0.000138  6.08  60.9  9.29 #>  8 -8.12 -4.51 median    12 0.000138  5.63  60.9  9.29 #>  9 -8.12 -4.51 q95       12 0.000138  8.23  60.9  9.29 #> 10 -8.12 -2.71 mean      18 0.000207  6.27  71.6  8.56 #> # ℹ 290 more rows  # is for some reason fun.args used with multiple functions, use ... to catch # superfluous arguments: funs <- list(   \"q95\" = function(x, ...) stats::quantile(x, probs = 0.95),   \"mean\" )  summary_wind_2d(data, ws, wd, NOx, fun = funs, fun.args = list(na.rm = TRUE),                 smooth = FALSE) #> Warning: attributes are not identical across measure variables; they will be dropped #> # A tibble: 200 × 8 #>        u      v stat      n      freq   NOx    wd    ws #>    <dbl>  <dbl> <chr> <int>     <dbl> <dbl> <dbl> <dbl> #>  1 -8.12 -8.12  mean      0 0         NA     45   11.5  #>  2 -8.12 -8.12  q95       0 0         NA     45   11.5  #>  3 -8.12 -6.32  mean      0 0         NA     52.1 10.3  #>  4 -8.12 -6.32  q95       0 0         NA     52.1 10.3  #>  5 -8.12 -4.51  mean     12 0.000138   6.08  60.9  9.29 #>  6 -8.12 -4.51  q95      12 0.000138   8.23  60.9  9.29 #>  7 -8.12 -2.71  mean     18 0.000207   6.27  71.6  8.56 #>  8 -8.12 -2.71  q95      18 0.000207  10.4   71.6  8.56 #>  9 -8.12 -0.903 mean      3 0.0000345  6.82  83.7  8.17 #> 10 -8.12 -0.903 q95       3 0.0000345  8.83  83.7  8.17 #> # ℹ 190 more rows  # additional groupings summary_wind_2d(data, ws, wd, NOx, groupings = grp(site), smooth = FALSE) #> # A tibble: 100 × 9 #>        u      v stat  site                        n      freq   NOx    wd    ws #>    <dbl>  <dbl> <chr> <fct>                   <int>     <dbl> <dbl> <dbl> <dbl> #>  1 -8.12 -8.12  mean  Zch_Stampfenbachstrasse     0 0         NA     45   11.5  #>  2 -8.12 -6.32  mean  Zch_Stampfenbachstrasse     0 0         NA     52.1 10.3  #>  3 -8.12 -4.51  mean  Zch_Stampfenbachstrasse    12 0.000138   6.08  60.9  9.29 #>  4 -8.12 -2.71  mean  Zch_Stampfenbachstrasse    18 0.000207   6.27  71.6  8.56 #>  5 -8.12 -0.903 mean  Zch_Stampfenbachstrasse     3 0.0000345  6.82  83.7  8.17 #>  6 -8.12  0.903 mean  Zch_Stampfenbachstrasse     0 0         NA     96.3  8.17 #>  7 -8.12  2.71  mean  Zch_Stampfenbachstrasse     0 0         NA    108.   8.56 #>  8 -8.12  4.51  mean  Zch_Stampfenbachstrasse     0 0         NA    119.   9.29 #>  9 -8.12  6.32  mean  Zch_Stampfenbachstrasse     0 0         NA    128.  10.3  #> 10 -8.12  8.12  mean  Zch_Stampfenbachstrasse     0 0         NA    135   11.5  #> # ℹ 90 more rows  # we can use expressions in grp For better readability groupings is # defined outside of the function call groupings = grp(\"site\", year = lubridate::year(date))  summary_wind_2d(data, ws, wd, NOx, groupings = groupings, smooth = FALSE) #> # A tibble: 500 × 10 #>        u     v stat  site                     year     n  freq   NOx    wd    ws #>    <dbl> <dbl> <chr> <fct>                   <dbl> <int> <dbl> <dbl> <dbl> <dbl> #>  1 -8.12 -8.12 mean  Zch_Stampfenbachstrasse  2010     0     0    NA  45    11.5 #>  2 -8.12 -8.12 mean  Zch_Stampfenbachstrasse  2011     0     0    NA  45    11.5 #>  3 -8.12 -8.12 mean  Zch_Stampfenbachstrasse  2012     0     0    NA  45    11.5 #>  4 -8.12 -8.12 mean  Zch_Stampfenbachstrasse  2013     0     0    NA  45    11.5 #>  5 -8.12 -8.12 mean  Zch_Stampfenbachstrasse  2014     0     0    NA  45    11.5 #>  6 -8.12 -6.32 mean  Zch_Stampfenbachstrasse  2010     0     0    NA  52.1  10.3 #>  7 -8.12 -6.32 mean  Zch_Stampfenbachstrasse  2011     0     0    NA  52.1  10.3 #>  8 -8.12 -6.32 mean  Zch_Stampfenbachstrasse  2012     0     0    NA  52.1  10.3 #>  9 -8.12 -6.32 mean  Zch_Stampfenbachstrasse  2013     0     0    NA  52.1  10.3 #> 10 -8.12 -6.32 mean  Zch_Stampfenbachstrasse  2014     0     0    NA  52.1  10.3 #> # ℹ 490 more rows  # smoothing df1 <- summary_wind_2d(data, ws, wd, NOx, bins = 100^2, smooth = FALSE) df2 <- summary_wind_2d(data, ws, wd, NOx, bins = 100^2, extrapolate = FALSE) df3 <- summary_wind_2d(data, ws, wd, NOx, bins = 100^2, smooth = TRUE)  df <- dplyr::bind_rows(   \"smooth = F\" = df1,   \"smooth = T, extrapolate = F\" = df2,   \"smooth = T, extrapolate = T\" = df3,   .id = \"smoothing\" )  ggplot(df, aes(x = u, y = v, fill = NOx)) +   coord_fixed(expand = FALSE) +   lims(x = c(-7.5, 7.5), y = c(-7.5, 7.5)) +   geom_raster() +   scale_fill_viridis_c(na.value = NA) +   facet_wrap(vars(smoothing), ncol = 2) #> Warning: Removed 23382 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # for a small number of bins reduce k summary_wind_2d(data, ws, wd, NO2, bins = 5^2, smooth = TRUE, k = 5) #> # A tibble: 25 × 8 #>    stat      u     v     n      freq   NO2    wd    ws #>    <chr> <dbl> <dbl> <int>     <dbl> <dbl> <dbl> <dbl> #>  1 mean  -7.22 -7.22     0 0         NA     45   10.2  #>  2 mean  -7.22 -3.61   211 0.00243    8.90  63.4  8.07 #>  3 mean  -7.22  0       26 0.000299  10.0   90    7.22 #>  4 mean  -7.22  3.61     4 0.0000461  9.19 117.   8.07 #>  5 mean  -7.22  7.22     0 0         NA    135   10.2  #>  6 mean  -3.61 -7.22     7 0.0000806 10.8   26.6  8.07 #>  7 mean  -3.61 -3.61  1858 0.0214    17.2   45    5.11 #>  8 mean  -3.61  0     8147 0.0938    20.0   90    3.61 #>  9 mean  -3.61  3.61   186 0.00214   18.5  135    5.11 #> 10 mean  -3.61  7.22     0 0         NA    153.   8.07 #> # ℹ 15 more rows"},{"path":"/reference/themes_rop.html","id":null,"dir":"Reference","previous_headings":"","what":"themes for rOstluft plots — themes_rop","title":"themes for rOstluft plots — themes_rop","text":"themes used respective gg wrapper apply basic theming.","code":""},{"path":"/reference/themes_rop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"themes for rOstluft plots — themes_rop","text":"","code":"theme_rop_traj(base = ggplot2::theme_minimal())  theme_rop_polarplot(base = ggplot2::theme_minimal())  theme_rop_radar(base = ggplot2::theme_minimal())  theme_rop_windrose(base = ggplot2::theme_minimal())  theme_rop_diuarnal(base = ggplot2::theme_classic())"},{"path":"/reference/themes_rop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"themes for rOstluft plots — themes_rop","text":"base ggplot2 theme. see ggplot2::theme()","code":""},{"path":"/reference/themes_rop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"themes for rOstluft plots — themes_rop","text":"","code":"library(ggplot2) fn <- rOstluft.data::f(\"Zch_Stampfenbachstrasse_2010-2014.csv\") data <- rOstluft::read_airmo_csv(fn) data <- rOstluft::rolf_to_openair(data) data <- dplyr::mutate(data, year = lubridate::year(date))  data_summarized <- summary_wind(data, ws, wd, ws,   ws_cutfun = cut_ws.fun(ws_max = 4, reverse = TRUE) )  p <- ggplot(data_summarized, aes(x = wd, y = freq, fill = ws)) +   geom_bar(stat = \"identity\") +   coord_polar2(start = - 22.5 / 180 * pi ) +   scale_y_continuous(     limits = c(0, NA),     expand = c(0,0, 0, 0),     labels = scales::percent   ) +   scale_fill_viridis_d()  # default appearance p   # with rOstluft theming for a windrose p + theme_rop_windrose()   # prefer bw as base and a bigger font for a presentation p + theme_rop_windrose(   theme_bw(base_size = 14) )"},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"/reference/uv2wd.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate wind direction from u, v wind components — uv2wd","title":"calculate wind direction from u, v wind components — uv2wd","text":"copied https://github.com/environmentalinformatics-marburg/Rsenal/blob/master/R/uv2wdws.R","code":""},{"path":"/reference/uv2wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate wind direction from u, v wind components — uv2wd","text":"","code":"uv2wd(u, v)"},{"path":"/reference/uv2wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate wind direction from u, v wind components — uv2wd","text":"u vector u components v vector v components","code":""},{"path":"/reference/uv2wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate wind direction from u, v wind components — uv2wd","text":"vector wind direction °","code":""}]
